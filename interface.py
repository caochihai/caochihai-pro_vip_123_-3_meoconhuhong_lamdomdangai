import streamlit as st
import requests
import base64
from requests.exceptions import RequestException, Timeout, ConnectionError
import nltk
from underthesea import word_tokenize
from nltk.translate.bleu_score import sentence_bleu, SmoothingFunction
from rouge_score import rouge_scorer
import re
import json
import os

def clean_text(text: str) -> str:
    text = re.sub(r'\*\*([^*]+)\*\*', r'\1', text)  # remove bold
    text = re.sub(r'\*([^*]+)\*', r'\1', text)      # remove italic
    text = re.sub(r'#+\s*', '', text)               # remove headers
    text = re.sub(r'[^\w\s]', ' ', text)            # remove punctuation
    text = re.sub(r'\s+', ' ', text)                # normalize spaces
    return text.strip()

st.set_page_config(
    page_title="AI Document Processor",   # Ti√™u ƒë·ªÅ trang (hi·ªÉn th·ªã tr√™n tab tr√¨nh duy·ªát)
    page_icon="üìÑ",                       # Bi·ªÉu t∆∞·ª£ng tab
    layout="wide",                        # Giao di·ªán to√†n m√†n h√¨nh (wide mode)
    initial_sidebar_state="expanded",     # Thanh sidebar m·ªü m·∫∑c ƒë·ªãnh
)

# üé® Tu·ª≥ ch·ªânh CSS ƒë·ªÉ ki·ªÉm so√°t t·ª∑ l·ªá hi·ªÉn th·ªã
st.markdown(
    """
    <style>
        /* ƒêi·ªÅu ch·ªânh t·ª∑ l·ªá t·ªïng th·ªÉ c·ªßa n·ªôi dung (1.0 = gi·ªØ nguy√™n m·∫∑c ƒë·ªãnh) */
        .block-container {
            transform: scale(1.0);
            transform-origin: top left; /* ƒêi·ªÉm neo ƒë·ªÉ scale */
        }
    </style>
    """,
    unsafe_allow_html=True
)

@st.cache_data
def load_sample_data():
    """Load sample summaries from JSON file"""
    json_file_path = "sample_summaries.json"
    
    try:
        with open(json_file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        st.error(f"‚ùå File {json_file_path} not found. Please make sure the JSON file exists.")
        return {"examples": {}}

# Unified CSS for color synchronization
st.markdown("""
<style>
    /* General Reset and Base Styles */
    * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
    }

    /* Main Container Styles */
    .main-header {
        text-align: center;
        color: #2c3e50;
        font-size: 3rem;
        font-weight: 700;
        margin-bottom: 2rem;
    }

    .section-header {
        color: #2c3e50;
        font-size: 1.5rem;
        font-weight: 600;
        margin: 1rem 0;
    }

    /* Buttons */
    .stButton > button {
        background: #3498db;
        color: #ffffff;
        border: none;
        border-radius: 8px;
        padding: 0.75rem 2rem;
        font-weight: 500;
        transition: background-color 0.3s ease;
    }

    .stButton > button:hover {
        background: #2980b9;
    }

    /* Cards and Containers */
    .floating-card {
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 10px;
        padding: 2rem;
        margin-bottom: 1.5rem;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .summary-box {
        background: #f8f9fa;
        color: #2c3e50;
        padding: 1.5rem;
        border-radius: 8px;
        border-left: 4px solid #3498db;
        max-height: 400px;
        overflow-y: auto;
        line-height: 1.6;
    }

    .chat-container {
        background: #ffffff;
        border: 1px solid #e9ecef;
        border-radius: 12px;
        padding: 1.5rem;
        min-height: 400px;
        max-height: 600px;
        overflow-y: auto;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }

    /* Sample Answer and Question Boxes */
    .sample-answer-container {
        background: #f8f9fa;
        border: 2px solid #3498db;
        border-radius: 12px;
        padding: 1.5rem;
        margin: 1rem 0;
        box-shadow: 0 4px 8px rgba(52, 152, 219, 0.1);
    }

    .sample-answer-header {
        background: #3498db;
        color: #ffffff;
        padding: 0.75rem 1rem;
        border-radius: 8px;
        font-weight: 600;
        margin-bottom: 1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .sample-answer-content {
        color: #2c3e50;
        line-height: 1.6;
        font-size: 0.95rem;
        background: #ffffff;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #27ae60;
    }

    .question-sample-box {
        background: #f8f9fa;
        border: 2px solid #f39c12;
        border-radius: 10px;
        padding: 1rem;
        margin-bottom: 1rem;
    }

    .question-header {
        background: #f39c12;
        color: #ffffff;
        padding: 0.5rem 1rem;
        border-radius: 6px;
        font-weight: 600;
        margin-bottom: 0.5rem;
        font-size: 0.9rem;
    }

    .question-content {
        color: #2c3e50;
        line-height: 1.4;
        font-size: 0.85rem;
        font-style: italic;
    }

    /* Chatbot Specific Styles */
    .header {
        background: linear-gradient(135deg, #3498db, #2980b9);
        padding: 2rem;
        border-radius: 15px;
        margin-bottom: 2rem;
        color: #ffffff;
        text-align: center;
    }

    .stats {
        display: flex;
        justify-content: center;
        gap: 2rem;
        margin-top: 1.5rem;
    }

    .stat {
        background: rgba(255, 255, 255, 0.2);
        padding: 0.8rem 1.5rem;
        border-radius: 10px;
    }

    .chat-box {
        background: #ffffff;
        border-radius: 15px;
        padding: 1.5rem;
        margin-bottom: 1rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }

    .sidebar {
        background: #f8f9fa;
        border-radius: 15px;
        padding: 1.5rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }

    .preview {
        background: #f8f9fa;
        border: 2px solid #f39c12;
        border-radius: 15px;
        padding: 1rem;
        margin-bottom: 1rem;
        max-height: 400px;
        overflow-y: auto;
    }

    .preview-answer {
        background: #f0fdf4;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #27ae60;
        line-height: 1.6;
    }

    .empty {
        text-align: center;
        padding: 3rem 2rem;
        color: #2c3e50;
    }

    .chat-section-divider {
        border: none;
        height: 2px;
        background: linear-gradient(90deg, transparent, #3498db, transparent);
        margin: 2rem 0;
    }

    @media (max-width: 768px) {
        .stats {
            flex-direction: column;
            gap: 0.5rem;
        }
    }
</style>
""", unsafe_allow_html=True)

# Initialize session state with separate variables for different sections
for key in ["pdf_url", "pdf_summary", "classification_summary", "agency", "messages", "chat_input_value"]:
    if key not in st.session_state:
        st.session_state[key] = [] if key == "messages" else ""

# Main title
#st.markdown('<h1 class="main-header">üìÑ Document Processor</h1>', unsafe_allow_html=True)

# Sidebar
st.sidebar.markdown("""
<div style="background: #34495e; color: white; 
           padding: 2rem; margin: -1rem -1rem 2rem -1rem; border-radius: 0 0 10px 10px;">
    <h2 style="text-align: center; margin: 0;">‚ö° Functions</h2>
</div>
""", unsafe_allow_html=True)

function_choice = st.sidebar.selectbox(
    "Choose your AI tool:",
    ["üìÑ PDF Text Summarizer", "üè∑Ô∏è Document Classification", "üí¨ Q&A Chatbot"],
    key="function_selector"
)


if function_choice == "üìÑ PDF Text Summarizer":
    st.markdown('<h1 class="main-header">üìù Text Summarization</h1>', unsafe_allow_html=True)
    # Create tabs for URL and File Upload
    tab1, tab2 = st.tabs(["üîó PDF from URL", "üìÅ Upload PDF File"])
    
    with tab1:
        # 1. SINGLE URL input ‚Äì top of page
        pdf_url = st.text_input(
            "üîó Enter PDF URL:",
            value=st.session_state.get("pdf_url", ""),
            placeholder="Paste your PDF link here...",
            help="Enter a direct link to your PDF file",
            key="unique_pdf_url_input",
        )
        st.session_state.pdf_url = pdf_url

        # --- ƒê∆∞·ªùng k·∫ª ph√¢n c√°ch 1 (ngay d∆∞·ªõi URL) ---
        st.markdown('<hr style="margin:0.5rem 0 1.5rem 0;">', unsafe_allow_html=True)

        # --- Layout: controls + comparison | viewer ----------------------
        col_controls, col_viewer = st.columns([1, 1.6], gap="large")

        # --- LEFT: controls & summaries --------------------------------
        with col_controls:
            # A. Generate button for URL - UNIFIED ENDPOINT
            if st.button("‚ú® Generate Summary", use_container_width=True, type="primary", key="url_summary"):
                if pdf_url:
                    with st.spinner("üìÑ Processing PDF‚Ä¶"):
                        try:
                            # Use correct endpoint for URL-based PDFs
                            resp = requests.post(
                                "http://1.53.58.232:8521/summarize_pdf",
                                json={"pdf_url": pdf_url},
                                timeout=300,
                            )
                            st.session_state.model_summary = (
                                resp.json().get("summary", "No summary data available.")
                                if resp.status_code == 200
                                else f"Error: {resp.status_code}"
                            )
                        except Exception as e:
                            st.session_state.model_summary = f"Error: {e}"
                else:
                    st.warning("‚ö†Ô∏è Please enter a PDF URL first")

            # B. Examples with Individual Sample Summaries
            st.markdown('<h3 class="section-header" style="margin-top:2rem;">üìå Examples</h3>', unsafe_allow_html=True)
            
            # Define sample summaries for each example
            sample_summaries = {
                "example1": """
**T√ìM T·∫ÆT VƒÇN B·∫¢N** \n
T√™n vƒÉn b·∫£n: Th√¥ng t∆∞ s·ªë ‚Ä¶/2025/TT-BTNMT ban h√†nh Quy chu·∫©n k·ªπ thu·∫≠t qu·ªëc gia v·ªÅ n∆∞·ªõc th·∫£i sinh ho·∫°t v√† n∆∞·ªõc th·∫£i ƒë√¥ th·ªã, khu d√¢n c∆∞ t·∫≠p trung (QCVN 14:2025/BTNMT).
C∆° quan ban h√†nh: B·ªô T√†i nguy√™n v√† M√¥i tr∆∞·ªùng.
Th·ªùi ƒëi·ªÉm ban h√†nh: NƒÉm 2025.
Ng∆∞·ªùi k√Ω: Th·ª© tr∆∞·ªüng L√™ C√¥ng Th√†nh.

1. **Ph·∫°m vi v√† ƒë·ªëi t∆∞·ª£ng √°p d·ª•ng** \n
Quy ƒë·ªãnh gi√° tr·ªã gi·ªõi h·∫°n cho ph√©p c·ªßa c√°c th√¥ng s·ªë √¥ nhi·ªÖm trong n∆∞·ªõc th·∫£i sinh ho·∫°t, n∆∞·ªõc th·∫£i ƒë√¥ th·ªã, khu d√¢n c∆∞ t·∫≠p trung khi x·∫£ ra ngu·ªìn ti·∫øp nh·∫≠n.
√Åp d·ª•ng cho m·ªçi c∆° quan, t·ªï ch·ª©c, c√° nh√¢n c√≥ ho·∫°t ƒë·ªông x·∫£ th·∫£i (tr·ª´ tr∆∞·ªùng h·ª£p c√≥ c√¥ng tr√¨nh x·ª≠ l√Ω t·∫°i ch·ªó).

2. **Hi·ªáu l·ª±c v√† thay th·∫ø** \n
C√≥ hi·ªáu l·ª±c t·ª´ nƒÉm 2025 (ng√†y c·ª• th·ªÉ ch∆∞a ƒëi·ªÅn).
Thay th·∫ø QCVN 14:2008/BTNMT.
Giai ƒëo·∫°n chuy·ªÉn ti·∫øp:
C√°c d·ª± √°n, c∆° s·ªü ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát ho·∫∑c n·ªôp h·ªì s∆° tr∆∞·ªõc th·ªùi ƒëi·ªÉm hi·ªáu l·ª±c v·∫´n √°p d·ª•ng QCVN 14:2008/BTNMT v√† QCVN 40:2011/BTNMT ƒë·∫øn h·∫øt 31/12/2031.
T·ª´ 01/01/2032: b·∫Øt bu·ªôc √°p d·ª•ng QCVN 14:2025/BTNMT.

3. **Quy ƒë·ªãnh k·ªπ thu·∫≠t** \n
ƒê∆∞a ra gi√° tr·ªã gi·ªõi h·∫°n th√¥ng s·ªë √¥ nhi·ªÖm (pH, BOD5, COD/TOC, TSS, Amoni, Nit∆° t·ªïng, Photpho t·ªïng, Coliform, Sunfua, d·∫ßu m·ª°, ch·∫•t ho·∫°t ƒë·ªông b·ªÅ m·∫∑t‚Ä¶) t·∫°i B·∫£ng 1 v√† B·∫£ng 2.
Ph√¢n lo·∫°i theo c·ªôt A, B, C t√πy theo ch·ª©c nƒÉng ngu·ªìn ti·∫øp nh·∫≠n n∆∞·ªõc th·∫£i (c·∫•p n∆∞·ªõc sinh ho·∫°t, c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng m√¥i tr∆∞·ªùng, ho·∫∑c ngu·ªìn kh√°c) v√† quy m√¥ l∆∞u l∆∞·ª£ng x·∫£ th·∫£i.

4. **Ph∆∞∆°ng ph√°p x√°c ƒë·ªãnh**\n
Th·ª±c hi·ªán theo TCVN, SMEWW, ISO, US EPA Method.
C√≥ quy ƒë·ªãnh ph∆∞∆°ng ph√°p tr·ªçng t√†i trong tr∆∞·ªùng h·ª£p c√≥ tranh ch·∫•p k·∫øt qu·∫£.

5. **Qu·∫£n l√Ω v√† tu√¢n th·ªß**\n
Th√¥ng s·ªë gi·ªõi h·∫°n ph·∫£i ghi r√µ trong b√°o c√°o ƒêTM, gi·∫•y ph√©p m√¥i tr∆∞·ªùng, vƒÉn b·∫£n ƒëƒÉng k√Ω m√¥i tr∆∞·ªùng.
Ki·ªÉm so√°t th√™m Clo, Chloroform n·∫øu d√πng Clo kh·ª≠ tr√πng; th√¥ng s·ªë ƒë·∫∑c tr∆∞ng kh√°c n·∫øu c√≥ ƒë·∫•u n·ªëi n∆∞·ªõc th·∫£i c√¥ng nghi·ªáp.
Quan tr·∫Øc v√† b√°o c√°o ph·∫£i do ƒë∆°n v·ªã c√≥ gi·∫•y ch·ª©ng nh·∫≠n d·ªãch v·ª• quan tr·∫Øc m√¥i tr∆∞·ªùng th·ª±c hi·ªán.

6. **Tr√°ch nhi·ªám**\n
Ch·ªß c∆° s·ªü, d·ª± √°n: ƒë·∫£m b·∫£o n∆∞·ªõc th·∫£i ƒë·∫°t chu·∫©n tr∆∞·ªõc khi x·∫£; x√°c ƒë·ªãnh ƒë√∫ng th√¥ng s·ªë √¥ nhi·ªÖm c·∫ßn ki·ªÉm so√°t.
C∆° quan qu·∫£n l√Ω: th·∫©m ƒë·ªãnh, c·∫•p ph√©p, ki·ªÉm tra gi√°m s√°t.
UBND c·∫•p t·ªânh: r√† so√°t, ƒëi·ªÅu ch·ªânh quy chu·∫©n ƒë·ªãa ph∆∞∆°ng ph√π h·ª£p v·ªõi QCVN m·ªõi.

7. **Ph·ª• l·ª•c k√®m theo**\n
Ph·ª• l·ª•c 1: Danh m·ª•c lo·∫°i h√¨nh kinh doanh, d·ªãch v·ª• ƒë∆∞·ª£c qu·∫£n l√Ω nh∆∞ n∆∞·ªõc th·∫£i sinh ho·∫°t (kh√°ch s·∫°n, nh√† ngh·ªâ, k√Ω t√∫c x√°, c∆° s·ªü y t·∫ø, d·ªãch v·ª• ƒÉn u·ªëng, gi·∫∑t l√†, massage, tr∆∞·ªùng h·ªçc, doanh tr·∫°i, khu chung c∆∞, si√™u th·ªã, c√¥ng vi√™n, b·∫øn xe, v.v.).
Ph·ª• l·ª•c 2: Ph∆∞∆°ng ph√°p l·∫•y m·∫´u, ph√¢n t√≠ch c√°c th√¥ng s·ªë √¥ nhi·ªÖm trong n∆∞·ªõc th·∫£i.\n

Th√¥ng t∆∞ 2025/TT-BTNMT ban h√†nh QCVN 14:2025/BTNMT quy ƒë·ªãnh gi·ªõi h·∫°n c√°c th√¥ng s·ªë √¥ nhi·ªÖm trong n∆∞·ªõc th·∫£i sinh ho·∫°t v√† n∆∞·ªõc th·∫£i ƒë√¥ th·ªã, thay th·∫ø QCVN 14:2008/BTNMT. VƒÉn b·∫£n ƒë∆∞a ra l·ªô tr√¨nh √°p d·ª•ng ƒë·∫øn 2032, quy ƒë·ªãnh chi ti·∫øt v·ªÅ gi·ªõi h·∫°n k·ªπ thu·∫≠t, ph∆∞∆°ng ph√°p quan tr·∫Øc, tr√°ch nhi·ªám c·ªßa c∆° quan qu·∫£n l√Ω v√† c∆° s·ªü x·∫£ th·∫£i, ƒë·ªìng th·ªùi k√®m ph·ª• l·ª•c v·ªÅ lo·∫°i h√¨nh √°p d·ª•ng v√† ph∆∞∆°ng ph√°p th·ª≠ nghi·ªám.
                """,
                
                "example2": """
**T√ìM T·∫ÆT VƒÇN B·∫¢N**\n
T√™n vƒÉn b·∫£n: Th√¥ng t∆∞ s·ªë ‚Ä¶/2025/TT-BTNMT quy ƒë·ªãnh chi ti·∫øt ph·∫°m vi ƒëi·ªÅu tra c∆° b·∫£n v·ªÅ t√†i nguy√™n ƒëi·ªán nƒÉng l∆∞·ª£ng t√°i t·∫°o v√† nƒÉng l∆∞·ª£ng m·ªõi.
C∆° quan ban h√†nh: B·ªô T√†i nguy√™n v√† M√¥i tr∆∞·ªùng.
Ng∆∞·ªùi k√Ω: Th·ª© tr∆∞·ªüng L√™ Minh Ng√¢n.
Hi·ªáu l·ª±c: NƒÉm 2025.

1. **Ph·∫°m vi v√† ƒë·ªëi t∆∞·ª£ng √°p d·ª•ng**\n
Quy ƒë·ªãnh v·ªÅ ƒëi·ªÅu tra c∆° b·∫£n c√°c d·∫°ng ƒëi·ªán nƒÉng l∆∞·ª£ng t√°i t·∫°o v√† nƒÉng l∆∞·ª£ng m·ªõi:
ƒêi·ªán m·∫∑t tr·ªùi, ƒëi·ªán gi√≥, ƒë·ªãa nhi·ªát, s√≥ng bi·ªÉn, th·ªßy tri·ªÅu, ch·∫•t th·∫£i r·∫Øn, sinh kh·ªëi, th·ªßy ƒëi·ªán.
√Åp d·ª•ng cho c∆° quan qu·∫£n l√Ω, t·ªï ch·ª©c, c√° nh√¢n li√™n quan ƒë·∫øn ƒëi·ªÅu tra ngu·ªìn ƒëi·ªán t√°i t·∫°o.

2. **Nguy√™n t·∫Øc v√† y√™u c·∫ßu**\n
Thu th·∫≠p d·ªØ li·ªáu ph·ª•c v·ª• quy ho·∫°ch ƒëi·ªán l·ª±c v√† quy ho·∫°ch t·ªânh.
∆Øu ti√™n v√πng c√≥ ti·ªÅm nƒÉng cao, h·∫° t·∫ßng l∆∞·ªõi ƒëi·ªán thu·∫≠n l·ª£i, khu v·ª±c thi·∫øu ƒëi·ªán.
D·ªØ li·ªáu ph·∫£i ch√≠nh x√°c, c·∫≠p nh·∫≠t, tu√¢n th·ªß quy chu·∫©n k·ªπ thu·∫≠t.
Kinh ph√≠ t·ª´ ng√¢n s√°ch v√† ngu·ªìn h·ª£p ph√°p kh√°c.

3. **N·ªôi dung ƒëi·ªÅu tra ch√≠nh**\n
ƒêi·ªán m·∫∑t tr·ªùi: ƒëo b·ª©c x·∫°, s·ªë gi·ªù n·∫Øng, ∆∞u ti√™n n∆°i b·ª©c x·∫° > 4 kWh/m¬≤/ng√†y.
ƒêi·ªán gi√≥: kh·∫£o s√°t t·ªëc ƒë·ªô, h∆∞·ªõng gi√≥, t·∫≠p trung ·ªü ven bi·ªÉn, cao nguy√™n.
ƒê·ªãa nhi·ªát: nghi√™n c·ª©u m·∫°ch n∆∞·ªõc n√≥ng, ƒë·ª©t g√£y ƒë·ªãa ch·∫•t.
S√≥ng bi·ªÉn: ƒëo chi·ªÅu cao, chu k·ª≥, m·∫≠t ƒë·ªô nƒÉng l∆∞·ª£ng s√≥ng.
Th·ªßy tri·ªÅu: ƒëo m·ª±c n∆∞·ªõc, bi√™n ƒë·ªô tri·ªÅu, ∆∞u ti√™n c·ª≠a s√¥ng, v·ªãnh l·ªõn.
Ch·∫•t th·∫£i r·∫Øn: th·ªëng k√™ kh·ªëi l∆∞·ª£ng, th√†nh ph·∫ßn, ∆∞u ti√™n ƒë√¥ th·ªã l·ªõn > 500 t·∫•n/ng√†y.
Sinh kh·ªëi: kh·∫£o s√°t ph·ª• ph·∫©m n√¥ng nghi·ªáp, chƒÉn nu√¥i, ch·∫ø bi·∫øn.
Th·ªßy ƒëi·ªán: ƒëi·ªÅu tra th·ªßy vƒÉn, s√¥ng su·ªëi, h·ªì ch·ª©a.

4. **K·∫øt qu·∫£ ƒëi·ªÅu tra**\n
B√°o c√°o t·ªïng h·ª£p.
B·∫£n ƒë·ªì ph√¢n b·ªë ti·ªÅm nƒÉng.
B·ªô d·ªØ li·ªáu gi·∫•y v√† s·ªë h√≥a, l∆∞u tr·ªØ t·∫°i B·ªô T√†i nguy√™n v√† M√¥i tr∆∞·ªùng.

5. **T·ªï ch·ª©c th·ª±c hi·ªán**\n
B·ªô, ng√†nh, ƒë·ªãa ph∆∞∆°ng, t·ªï ch·ª©c, c√° nh√¢n li√™n quan c√≥ tr√°ch nhi·ªám tri·ªÉn khai.
V∆∞·ªõng m·∫Øc b√°o c√°o B·ªô TN&MT ƒë·ªÉ x·ª≠ l√Ω.

Th√¥ng t∆∞ 2025/TT-BTNMT quy ƒë·ªãnh chi ti·∫øt ph·∫°m vi ƒëi·ªÅu tra c∆° b·∫£n v·ªÅ t√†i nguy√™n ƒëi·ªán nƒÉng l∆∞·ª£ng t√°i t·∫°o v√† nƒÉng l∆∞·ª£ng m·ªõi (m·∫∑t tr·ªùi, gi√≥, ƒë·ªãa nhi·ªát, s√≥ng bi·ªÉn, th·ªßy tri·ªÅu, ch·∫•t th·∫£i, sinh kh·ªëi, th·ªßy ƒëi·ªán). ƒêi·ªÅu tra nh·∫±m ph·ª•c v·ª• quy ho·∫°ch ƒëi·ªán l·ª±c, an ninh nƒÉng l∆∞·ª£ng, ph√°t tri·ªÉn b·ªÅn v·ªØng, v·ªõi k·∫øt qu·∫£ l√† b√°o c√°o, b·∫£n ƒë·ªì ph√¢n b·ªë ti·ªÅm nƒÉng v√† c∆° s·ªü d·ªØ li·ªáu qu·ªëc gia.
                """,
                
                "example3": """
**T√ìM T·∫ÆT VƒÇN B·∫¢N**\n
T√™n vƒÉn b·∫£n: Th√¥ng t∆∞ s·ªë ‚Ä¶/2025/TT-BNNMT s·ª≠a ƒë·ªïi, b·ªï sung Th√¥ng t∆∞ s·ªë 25/2024/TT-BNNPTNT ng√†y 16/12/2024.
C∆° quan ban h√†nh: B·ªô N√¥ng nghi·ªáp v√† M√¥i tr∆∞·ªùng.
Ng∆∞·ªùi k√Ω: Th·ª© tr∆∞·ªüng Ho√†ng Trung.
Hi·ªáu l·ª±c: NƒÉm 2025 (ng√†y c·ª• th·ªÉ s·∫Ω ghi trong vƒÉn b·∫£n ch√≠nh th·ª©c).

1. **N·ªôi dung s·ª≠a ƒë·ªïi, b·ªï sung**\n
ƒêi·ªÅu ch·ªânh th√¥ng tin v·ªÅ t√™n th∆∞∆°ng ph·∫©m v√† t·ªï ch·ª©c, c√° nh√¢n ƒëƒÉng k√Ω:
39 ho·∫°t ch·∫•t, 44 t√™n th∆∞∆°ng ph·∫©m thay ƒë·ªïi th√¥ng tin t·ªï ch·ª©c/c√° nh√¢n ƒëƒÉng k√Ω.
01 ho·∫°t ch·∫•t, 01 t√™n th∆∞∆°ng ph·∫©m thay ƒë·ªïi t√™n th∆∞∆°ng ph·∫©m.
B·ªï sung danh m·ª•c thu·ªëc b·∫£o v·ªá th·ª±c v·∫≠t ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng t·∫°i Vi·ªát Nam:
Thu·ªëc tr·ª´ s√¢u: 132 ho·∫°t ch·∫•t, 189 t√™n th∆∞∆°ng ph·∫©m.
Thu·ªëc tr·ª´ b·ªánh: 112 ho·∫°t ch·∫•t, 136 t√™n th∆∞∆°ng ph·∫©m.
Thu·ªëc tr·ª´ c·ªè: 32 ho·∫°t ch·∫•t, 60 t√™n th∆∞∆°ng ph·∫©m.
Thu·ªëc ƒëi·ªÅu h√≤a sinh tr∆∞·ªüng: 05 ho·∫°t ch·∫•t, 07 t√™n th∆∞∆°ng ph·∫©m.
Thu·ªëc tr·ª´ chu·ªôt: 05 ho·∫°t ch·∫•t, 07 t√™n th∆∞∆°ng ph·∫©m.
Thu·ªëc tr·ª´ ·ªëc: 01 ho·∫°t ch·∫•t, 02 t√™n th∆∞∆°ng ph·∫©m.
Thu·ªëc tr·ª´ m·ªëi: 03 ho·∫°t ch·∫•t, 03 t√™n th∆∞∆°ng ph·∫©m.
Thu·ªëc kh·ª≠ tr√πng kho: 01 ho·∫°t ch·∫•t, 01 t√™n th∆∞∆°ng ph·∫©m.
Thu·ªëc b·∫£o qu·∫£n n√¥ng s·∫£n: 01 ho·∫°t ch·∫•t, 01 t√™n th∆∞∆°ng ph·∫©m.
M√£ s·ªë HS c·ªßa c√°c lo·∫°i thu·ªëc tr√™n ƒë∆∞·ª£c th·ª±c hi·ªán theo Ph·ª• l·ª•c I c·ªßa Th√¥ng t∆∞ 01/2024/TT-BNNPTNT.

2. **Hi·ªáu l·ª±c v√† thi h√†nh**
Th√¥ng t∆∞ c√≥ hi·ªáu l·ª±c t·ª´ nƒÉm 2025.
C·ª•c Tr·ªìng tr·ªçt v√† B·∫£o v·ªá th·ª±c v·∫≠t, c√°c ƒë∆°n v·ªã thu·ªôc B·ªô, S·ªü N√¥ng nghi·ªáp v√† M√¥i tr∆∞·ªùng c√°c t·ªânh/th√†nh ph·ªë, c√πng t·ªï ch·ª©c/c√° nh√¢n li√™n quan c√≥ tr√°ch nhi·ªám thi h√†nh.
N·∫øu c√≥ kh√≥ khƒÉn, v∆∞·ªõng m·∫Øc th√¨ ph·∫£n √°nh v·ªÅ B·ªô N√¥ng nghi·ªáp v√† M√¥i tr∆∞·ªùng ƒë·ªÉ gi·∫£i quy·∫øt.

Th√¥ng t∆∞ 2025/TT-BNNMT s·ª≠a ƒë·ªïi, b·ªï sung Danh m·ª•c thu·ªëc b·∫£o v·ªá th·ª±c v·∫≠t theo Th√¥ng t∆∞ 25/2024, g·ªìm ƒëi·ªÅu ch·ªânh th√¥ng tin 40 th∆∞∆°ng ph·∫©m/ho·∫°t ch·∫•t, b·ªï sung g·∫ßn 300 ho·∫°t ch·∫•t v·ªõi h∆°n 400 t√™n th∆∞∆°ng ph·∫©m m·ªõi ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng, ƒë·ªìng th·ªùi quy ƒë·ªãnh √°p d·ª•ng m√£ s·ªë HS th·ªëng nh·∫•t.
                """
            }
            
            ex1, ex2, ex3 = st.columns(3)
            with ex1:
                if st.button("üìå Example 1", use_container_width=True, key="ex1_url"):
                    st.session_state.pdf_url = "https://vbpl.vn/FileData/TW/Lists/vbpq/Attachments/176983/VanBanGoc_645029.pdf"
                    st.session_state.pdf_summary = sample_summaries["example1"]
                    st.rerun()
            with ex2:
                if st.button("üìå Example 2", use_container_width=True, key="ex2_url"):
                    st.session_state.pdf_url = "https://vbpl.vn/FileData/TW/Lists/vbpq/Attachments/175320/VanBanGoc_2025.%20TT%20Dieutra%20dien%20NL%20tai%20tao.pdf"
                    st.session_state.pdf_summary = sample_summaries["example2"]
                    st.rerun()
            with ex3:
                if st.button("üìå Example 3", use_container_width=True, key="ex3_url"):
                    st.session_state.pdf_url = "https://vbpl.vn/FileData/TW/Lists/vbpq/Attachments/177810/VanBanGoc_03-bnnmt.pdf"
                    st.session_state.pdf_summary = sample_summaries["example3"]
                    st.rerun()

            # --- ƒê∆∞·ªùng k·∫ª ph√¢n c√°ch 2 (ngay d∆∞·ªõi v√≠ d·ª•) ---
            st.markdown('<hr style="margin:2rem 0;">', unsafe_allow_html=True)

            # C. Summary comparison (scrollable) for URL tab
            if st.session_state.get("pdf_summary") or st.session_state.get("model_summary"):
                st.markdown('<h3 class="section-header">üìù Summary Comparison</h3>', unsafe_allow_html=True)
                g, m = st.columns(2)
                with g:
                    st.markdown(
                        '<div style="border-left:4px solid #007bff;padding:1rem;border-radius:8px;'
                        'background:#f8f9fa;max-height:60vh;overflow-y:auto;">'
                        "<h4>Sample Summary</h4><pre style='white-space:pre-wrap;font-size:0.95rem'>"
                        f"{st.session_state.get('pdf_summary','üìã Select an example')}</pre></div>",
                        unsafe_allow_html=True,
                    )
                with m:
                    st.markdown(
                        '<div style="border-left:4px solid #28a745;padding:1rem;border-radius:8px;'
                        'background:#f0fff4;max-height:60vh;overflow-y:auto;">'
                        "<h4>Model Generated</h4><pre style='white-space:pre-wrap;font-size:0.95rem'>"
                        f"{st.session_state.get('model_summary','ü§ñ Click Generate Summary')}</pre></div>",
                        unsafe_allow_html=True,
                    )

                # --- SCORING SECTION ---
                if st.session_state.get("pdf_summary") and st.session_state.get("model_summary"):
                    if st.button("üìä Evaluate Summary"):
                        import re, math
                        from collections import Counter
                        
                        def tokenize(text):
                            return re.findall(r'[a-zA-Z√Ä-·ªπ0-9]+', re.sub(r'\*\*(.*?)\*\*', r'\1', text).lower())
                        
                        def bleu_n(ref, cand, n):
                            if len(cand) < n: return 0.0
                            ref_ng = Counter([tuple(ref[i:i+n]) for i in range(len(ref)-n+1)])
                            cand_ng = Counter([tuple(cand[i:i+n]) for i in range(len(cand)-n+1)])
                            matches = sum(min(cand_ng[ng], ref_ng[ng]) for ng in cand_ng)
                            return matches / sum(cand_ng.values()) if sum(cand_ng.values()) else 0.0
                        
                        def rouge_n(ref, cand, n):
                            if len(ref) < n: return 0.0
                            ref_ng = Counter([tuple(ref[i:i+n]) for i in range(len(ref)-n+1)])
                            cand_ng = Counter([tuple(cand[i:i+n]) for i in range(len(cand)-n+1)])
                            matches = sum(min(ref_ng[ng], cand_ng[ng]) for ng in ref_ng)
                            return matches / sum(ref_ng.values())
                        
                        def rouge_l(ref, cand):
                            m, n = len(ref), len(cand)
                            L = [[0]*(n+1) for _ in range(m+1)]
                            for i in range(1, m+1):
                                for j in range(1, n+1):
                                    if ref[i-1] == cand[j-1]:
                                        L[i][j] = L[i-1][j-1] + 1
                                    else:
                                        L[i][j] = max(L[i-1][j], L[i][j-1])
                            lcs = L[m][n]
                            if m == 0 or n == 0: return 0.0
                            recall = lcs / m
                            precision = lcs / n
                            return (2 * recall * precision) / (recall + precision) if (recall + precision) else 0.0
                        
                        ref_tokens = tokenize(st.session_state.pdf_summary)
                        cand_tokens = tokenize(st.session_state.model_summary)
                        
                        # Calculate all scores
                        b1 = bleu_n(ref_tokens, cand_tokens, 1)
                        b2 = bleu_n(ref_tokens, cand_tokens, 2)
                        b3 = bleu_n(ref_tokens, cand_tokens, 3)
                        b4 = bleu_n(ref_tokens, cand_tokens, 4)
                        r1 = rouge_n(ref_tokens, cand_tokens, 1)
                        r2 = rouge_n(ref_tokens, cand_tokens, 2)
                        rl = rouge_l(ref_tokens, cand_tokens)
                        
                        # Simple evaluation
                        avg_score = (b1 + b2 + b3 + b4 + r1 + r2 + rl) / 7
                        
                        if avg_score >= 0.3:
                            quality = "‚úÖ Good"
                            color = "green"
                        elif avg_score >= 0.15:
                            quality = "‚ö†Ô∏è Average"  
                            color = "orange"
                        else:
                            quality = "‚ùå Poor"
                            color = "red"
                        
                        # Display results
                        st.markdown(f"**Summary Quality: <span style='color:{color}'>{quality}</span>** (Score: {avg_score:.3f})", unsafe_allow_html=True)
                        
                        # BLEU scores (top row)
                        col1, col2, col3, col4 = st.columns(4)
                        with col1: st.metric("BLEU-1", f"{b1:.3f}")
                        with col2: st.metric("BLEU-2", f"{b2:.3f}")
                        with col3: st.metric("BLEU-3", f"{b3:.3f}")
                        with col4: st.metric("BLEU-4", f"{b4:.3f}")
                        
                        # ROUGE scores (bottom row)  
                        col5, col6, col7, col8 = st.columns([1,1,1,1])
                        with col5: st.metric("ROUGE-1", f"{r1:.3f}")
                        with col6: st.metric("ROUGE-2", f"{r2:.3f}")
                        with col7: st.metric("ROUGE-L", f"{rl:.3f}")
                        with col8: st.write("")  # Empty space


        # --- RIGHT: PDF viewer -------------------------------------------
        with col_viewer:
            st.markdown('<h2 class="section-header">üìñ PDF Viewer</h2>', unsafe_allow_html=True)
            if pdf_url:
                try:
                    with st.spinner("üìÑ Loading PDF‚Ä¶"):
                        pdf_data = requests.get(pdf_url, timeout=30).content
                        b64 = base64.b64encode(pdf_data).decode()
                    st.markdown(
                        f"""
                        <div style="border:1px solid #dee2e6;border-radius:8px;overflow:hidden;">
                            <iframe src="data:application/pdf;base64,{b64}"
                                    width="100%" height="1000" style="border:none;"></iframe>
                        </div>
                        """,
                        unsafe_allow_html=True,
                    )
                except Exception:
                    st.error("‚ùå Unable to load PDF. Check the URL and try again.")
            else:
                st.markdown(
                    """
                    <div style="text-align:center;padding:4rem;">
                        <div style="font-size:4rem;margin-bottom:1rem;">üìÑ</div>
                        <h3 style="color:#666;margin-bottom:1rem;">No PDF Selected</h3>
                        <p style="color:#999;">Enter a PDF URL to view the document</p>
                    </div>
                    """,
                    unsafe_allow_html=True,
                )

    with tab2:
        # File upload section
        uploaded_file = st.file_uploader(
            "üìÅ Choose a PDF file:",
            type=['pdf'],
            help="Upload a PDF file from your computer",
            key="pdf_file_uploader"
        )
        
        # --- ƒê∆∞·ªùng k·∫ª ph√¢n c√°ch ---
        st.markdown('<hr style="margin:0.5rem 0 1.5rem 0;">', unsafe_allow_html=True)

        # --- Layout: controls + comparison | viewer ----------------------
        col_controls_upload, col_viewer_upload = st.columns([1, 1.6], gap="large")

        # --- LEFT: controls & summaries for uploaded file --------------------------------
        with col_controls_upload:
            # A. Generate button for uploaded file - UNIFIED ENDPOINT
            if st.button("‚ú® Generate Summary", use_container_width=True, type="primary", key="file_summary"):
                if uploaded_file is not None:
                    with st.spinner("üìÑ Processing uploaded PDF‚Ä¶"):
                        try:
                            # Reset file pointer
                            uploaded_file.seek(0)
                            
                            # Prepare the file for upload to correct API endpoint
                            files = {"file": (uploaded_file.name, uploaded_file.read(), "application/pdf")}
                            
                            # Send to correct file upload endpoint
                            resp = requests.post(
                                "http://1.53.58.232:8521/summarize_pdf_file",
                                files=files,
                                timeout=150,
                            )
                            
                            if resp.status_code == 200:
                                st.session_state.model_summary_upload = resp.json().get("summary", "No summary data available.")
                            else:
                                st.session_state.model_summary_upload = f"Error: {resp.status_code} - {resp.text}"
                                
                        except Exception as e:
                            st.session_state.model_summary_upload = f"Error: {e}"
                        finally:
                            # Reset file pointer again
                            uploaded_file.seek(0)
                else:
                    st.warning("‚ö†Ô∏è Please upload a PDF file first")

            # B. File info
            if uploaded_file is not None:
                st.markdown('<h3 class="section-header" style="margin-top:2rem;">üìÑ File Info</h3>', unsafe_allow_html=True)
                file_details = {
                    "üìã Filename": uploaded_file.name,
                    "üìä File size": f"{uploaded_file.size / 1024:.1f} KB",
                    "üè∑Ô∏è File type": uploaded_file.type
                }
                
                for label, value in file_details.items():
                    st.markdown(f"**{label}:** {value}")

            # --- ƒê∆∞·ªùng k·∫ª ph√¢n c√°ch 2 (ngay d∆∞·ªõi file info) ---
            st.markdown('<hr style="margin:2rem 0;">', unsafe_allow_html=True)

            # C. Summary display for uploaded file
            if st.session_state.get("model_summary_upload"):
                st.markdown('<h3 class="section-header">üìù Generated Summary</h3>', unsafe_allow_html=True)
                st.markdown(
                    '<div style="border-left:4px solid #28a745;padding:1rem;border-radius:8px;'
                    'background:#f0fff4;max-height:60vh;overflow-y:auto;">'
                    "<h4>Model Generated Summary</h4><pre style='white-space:pre-wrap;font-size:0.95rem'>"
                    f"{st.session_state.get('model_summary_upload','')}</pre></div>",
                    unsafe_allow_html=True,
                )
            
            # D. Clear results button
            if st.session_state.get("model_summary_upload"):
                if st.button("üóëÔ∏è Clear Results", use_container_width=True, key="clear_upload_results"):
                    if "model_summary_upload" in st.session_state:
                        del st.session_state.model_summary_upload
                    st.rerun()

        # --- RIGHT: PDF viewer for uploaded file ---
        with col_viewer_upload:
            st.markdown('<h2 class="section-header">üìñ PDF Viewer</h2>', unsafe_allow_html=True)
            if uploaded_file is not None:
                try:
                    # Display the uploaded PDF
                    pdf_bytes = uploaded_file.read()
                    b64 = base64.b64encode(pdf_bytes).decode()
                    st.markdown(
                        f"""
                        <div style="border:1px solid #dee2e6;border-radius:8px;overflow:hidden;">
                            <iframe src="data:application/pdf;base64,{b64}"
                                    width="100%" height="1000" style="border:none;"></iframe>
                        </div>
                        """,
                        unsafe_allow_html=True,
                    )
                    # Reset file pointer for later use
                    uploaded_file.seek(0)
                except Exception as e:
                    st.error(f"‚ùå Unable to display PDF: {str(e)}")
            else:
                st.markdown(
                    """
                    <div style="text-align:center;padding:4rem;">
                        <div style="font-size:4rem;margin-bottom:1rem;">üìÅ</div>
                        <h3 style="color:#666;margin-bottom:1rem;">No PDF Uploaded</h3>
                        <p style="color:#999;">Upload a PDF file to view the document</p>
                    </div>
                    """,
                    unsafe_allow_html=True,
                )
                    
############################## phan loai



elif function_choice == "üè∑Ô∏è Document Classification":
    st.markdown('<h1 class="main-header">üè∑Ô∏è Document Classification</h3></h1>', unsafe_allow_html=True)
    #st.markdown('<h3>üè∑Ô∏è Document Classification</h3>', unsafe_allow_html=True)
    col_input, col_viewer = st.columns([1, 2], gap="large")
    with col_input:
        st.markdown('<hr>', unsafe_allow_html=True)
        st.markdown('<h4>üìù Document Information</h4>', unsafe_allow_html=True)
        classification_summary = st.text_area(
            "Document Summary:",
            height=120,
            value=st.session_state.classification_summary,
            placeholder="Enter document summary here..."
        )
        agency = st.text_input(
            "Issuing Agency:",
            value=st.session_state.agency,
            placeholder="Enter the issuing agency..."
        )
        st.session_state.classification_summary = classification_summary
        st.session_state.agency = agency
        if st.button("üîç Classify Document", type="primary", use_container_width=True):
            if not classification_summary or not agency:
                st.warning("‚ö†Ô∏è Please fill in both Summary and Agency fields")
            elif len(classification_summary) < 5 or len(agency) < 5:
                st.warning("‚ö†Ô∏è Text too short. Please enter at least 5 characters for Summary and Agency")
            else:
                with st.spinner("üîç Classifying document..."):
                    try:
                        response = requests.post(
                            "http://1.53.58.232:8888/classify",
                            json={"summary": classification_summary, "issuing_agency": agency},
                            timeout=30
                        )
                        if response.status_code == 200:
                            result = response.json()
                            st.success("‚úÖ Classification complete!")
                            st.markdown('<h4>üìã Classification Results</h4>', unsafe_allow_html=True)
                            col_label, col_other = st.columns([1, 1])
                            with col_label:
                                # Use actual_label from session_state if available, otherwise from API response
                                if hasattr(st.session_state, 'actual_label') and st.session_state.actual_label:
                                    actual_label = st.session_state.actual_label
                                else:
                                    actual_label = result.get("label", ["Not provided in response"]) if isinstance(result, dict) else ["Not provided"]
                                
                                if not isinstance(actual_label, list):
                                    actual_label = [actual_label]
                                
                                st.markdown(
                                    """
                                    <div style='background-color: #f0f2f6; padding: 10px; border-radius: 5px; margin-bottom: 10px;'>
                                        <strong>Actual Label:</strong>
                                    </div>
                                    """,
                                    unsafe_allow_html=True
                                )
                                for label in actual_label:
                                    st.markdown(
                                        f"""
                                        <div style='background-color: #e6e8ed; padding: 8px; border-radius: 5px; margin-bottom: 5px;'>
                                            {label}
                                        </div>
                                        """,
                                        unsafe_allow_html=True
                                    )
                            with col_other:
                                # Get predicted labels from API response
                                predicted_labels = []
                                if isinstance(result, dict):
                                    for key, value in result.items():
                                        if isinstance(value, list):
                                            predicted_labels.extend(value)
                                        elif isinstance(value, dict):
                                            for sub_key, sub_value in value.items():
                                                if isinstance(sub_value, list):
                                                    predicted_labels.extend(sub_value)
                                                else:
                                                    predicted_labels.append(str(sub_value))
                                        else:
                                            predicted_labels.append(str(value))
                                else:
                                    predicted_labels.append(str(result))
                                
                                st.markdown(
                                    """
                                    <div style='background-color: #f0f2f6; padding: 10px; border-radius: 5px; margin-bottom: 10px;'>
                                        <strong>Predicted Labels:</strong>
                                    </div>
                                    """,
                                    unsafe_allow_html=True
                                )
                                
                                # Display predicted labels with highlighting
                                if isinstance(result, dict):
                                    for key, value in result.items():
                                        if key != "label":
                                            if isinstance(value, list):
                                                for item in value:
                                                    # Check if this predicted label matches any actual label
                                                    is_correct = str(item) in [str(al) for al in actual_label] if hasattr(st.session_state, 'actual_label') and st.session_state.actual_label else False
                                                    bg_color = "#d4edda" if is_correct else "#f8d7da"  # Green for correct, red for incorrect
                                                    border_color = "#c3e6cb" if is_correct else "#f5c6cb"
                                                    st.markdown(
                                                        f"""
                                                        <div style='background-color: {bg_color}; border: 1px solid {border_color}; padding: 8px; border-radius: 5px; margin-bottom: 5px;'>
                                                            {item} {'‚úÖ' if is_correct else '‚ùå'}
                                                        </div>
                                                        """,
                                                        unsafe_allow_html=True
                                                    )
                                            elif isinstance(value, dict):
                                                for sub_key, sub_value in value.items():
                                                    is_correct = str(sub_value) in [str(al) for al in actual_label] if hasattr(st.session_state, 'actual_label') and st.session_state.actual_label else False
                                                    bg_color = "#d4edda" if is_correct else "#f8d7da"
                                                    border_color = "#c3e6cb" if is_correct else "#f5c6cb"
                                                    st.markdown(
                                                        f"""
                                                        <div style='background-color: {bg_color}; border: 1px solid {border_color}; padding: 8px; border-radius: 5px; margin-bottom: 5px;'>
                                                            <strong>{sub_key}:</strong> {sub_value} {'‚úÖ' if is_correct else '‚ùå'}
                                                        </div>
                                                        """,
                                                        unsafe_allow_html=True
                                                    )
                                            else:
                                                is_correct = str(value) in [str(al) for al in actual_label] if hasattr(st.session_state, 'actual_label') and st.session_state.actual_label else False
                                                bg_color = "#d4edda" if is_correct else "#f8d7da"
                                                border_color = "#c3e6cb" if is_correct else "#f5c6cb"
                                                st.markdown(
                                                    f"""
                                                    <div style='background-color: {bg_color}; border: 1px solid {border_color}; padding: 8px; border-radius: 5px; margin-bottom: 5px;'>
                                                        {value} {'‚úÖ' if is_correct else '‚ùå'}
                                                    </div>
                                                    """,
                                                    unsafe_allow_html=True
                                                )
                                else:
                                    is_correct = str(result) in [str(al) for al in actual_label] if hasattr(st.session_state, 'actual_label') and st.session_state.actual_label else False
                                    bg_color = "#d4edda" if is_correct else "#f8d7da"
                                    border_color = "#c3e6cb" if is_correct else "#f5c6cb"
                                    st.markdown(
                                        f"""
                                        <div style='background-color: {bg_color}; border: 1px solid {border_color}; padding: 8px; border-radius: 5px; margin-bottom: 5px;'>
                                            {result} {'‚úÖ' if is_correct else '‚ùå'}
                                        </div>
                                        """,
                                        unsafe_allow_html=True
                                    )
                        else:
                            st.error(f"‚ùå Error: {response.status_code}")
                    except Exception as e:
                        st.error(f"‚ùå Error: {str(e)}")

        st.markdown('<h4>üìå Examples</h4>', unsafe_allow_html=True)
        col1, col2 = st.columns(2)

        # Example 2: Agriculture Strategy
        with col1:
            if st.button("Exemple 1", use_container_width=True):
                st.session_state.classification_summary = "Ph√™ duy·ªát Chi·∫øn l∆∞·ª£c ph√°t tri·ªÉn tr·ªìng tr·ªçt ƒë·∫øn nƒÉm 2030, t·∫ßm nh√¨n ƒë·∫øn nƒÉm 2050"
                st.session_state.agency = "Th·ªß t∆∞·ªõng Ch√≠nh ph·ªß"
                st.session_state.example_pdf_url = "https://datafiles.chinhphu.vn/cpp/files/vbpq/2024/01/1748-ttg.signed.pdf"
                st.session_state.actual_label = [s.lower() for s in[
                    "V·ª• M√¥i tr∆∞·ªùng", "T·ªïng c·ª•c Kh√≠ t∆∞·ª£ng Thu·ª∑ vƒÉn", "C·ª•c B·∫£o t·ªìn thi√™n nhi√™n v√† ƒêa d·∫°ng sinh h·ªçc",
                    "C·ª•c Ki·ªÉm so√°t √¥ nhi·ªÖm m√¥i tr∆∞·ªùng", "C·ª•c Bi·∫øn ƒë·ªïi kh√≠ h·∫≠u", "C·ª•c Qu·∫£n l√Ω T√†i nguy√™n n∆∞·ªõc",
                    "C·ª•c Vi·ªÖn th√°m Qu·ªëc gia", "V·ª• Ph√°p ch·∫ø", "V·ª• T·ªï ch·ª©c c√°n b·ªô", "C·ª•c ƒêo ƒë·∫°c, B·∫£n ƒë·ªì v√† Th√¥ng tin ƒë·ªãa l√Ω Vi·ªát Nam",
                    "V·ª• ƒê·∫•t ƒëai", "C·ª•c Bi·ªÉn v√† H·∫£i ƒë·∫£o Vi·ªát Nam", "C·ª•c ƒêƒÉng k√Ω v√† D·ªØ li·ªáu th√¥ng tin ƒë·∫•t ƒëai",
                    "C·ª•c Quy ho·∫°ch v√† Ph√°t tri·ªÉn t√†i nguy√™n ƒë·∫•t", "Vi·ªán Khoa h·ªçc m√¥i tr∆∞·ªùng, bi·ªÉn v√† h·∫£i ƒë·∫£o", "V·ª• K·∫ø ho·∫°ch - T√†i ch√≠nh"
                ]]
                st.rerun()

        # Example 3: Overseas Vietnamese Committee
        with col2:
            if st.button("Exemple 2", use_container_width=True):
                st.session_state.classification_summary = "Quy·∫øt ƒë·ªãnh Quy ƒë·ªãnh ch·ª©c nƒÉng, nhi·ªám v·ª•, quy·ªÅn h·∫°n v√† c∆° c·∫•u t·ªï ch·ª©c c·ªßa ·ª¶y ban Nh√† n∆∞·ªõc v·ªÅ ng∆∞·ªùi Vi·ªát Nam ·ªü n∆∞·ªõc ngo√†i tr·ª±c thu·ªôc B·ªô Ngo·∫°i giao"
                st.session_state.agency = "Th·ªß t∆∞·ªõng Ch√≠nh ph·ªß"
                st.session_state.example_pdf_url = "https://datafiles.chinhphu.vn/cpp/files/vbpq/2023/12/30-qdttg.signed.pdf"
                st.session_state.actual_label = [s.lower() for s in[
                    "V·ª• ƒê·∫•t ƒëai", "C·ª•c Bi·ªÉn v√† H·∫£i ƒë·∫£o Vi·ªát Nam", "C·ª•c ƒêƒÉng k√Ω v√† D·ªØ li·ªáu th√¥ng tin ƒë·∫•t ƒëai",
                    "C·ª•c Quy ho·∫°ch v√† Ph√°t tri·ªÉn t√†i nguy√™n ƒë·∫•t", "Vi·ªán Khoa h·ªçc m√¥i tr∆∞·ªùng, bi·ªÉn v√† h·∫£i ƒë·∫£o",
                    "V·ª• K·∫ø ho·∫°ch - T√†i ch√≠nh", "V·ª• Ph√°p ch·∫ø", "V·ª• T·ªï ch·ª©c c√°n b·ªô", "Thanh tra B·ªô",
                    "C·ª•c ƒêo ƒë·∫°c, B·∫£n ƒë·ªì v√† Th√¥ng tin ƒë·ªãa l√Ω Vi·ªát Nam", "Vi·ªán Khoa h·ªçc ƒêo ƒë·∫°c v√† B·∫£n ƒë·ªì",
                    "Tr∆∞·ªùng ƒê√†o t·∫°o, b·ªìi d∆∞·ª°ng c√°n b·ªô t√†i nguy√™n v√† m√¥i tr∆∞·ªùng", "V·ª• H·ª£p t√°c qu·ªëc t·∫ø",
                    "V·ª• Khoa h·ªçc v√† C√¥ng ngh·ªá", "V·ª• M√¥i tr∆∞·ªùng", "C·ª•c B·∫£o t·ªìn thi√™n nhi√™n v√† ƒêa d·∫°ng sinh h·ªçc",
                    "C·ª•c Ki·ªÉm so√°t √¥ nhi·ªÖm m√¥i tr∆∞·ªùng", "Vi·ªán Chi·∫øn l∆∞·ª£c, Ch√≠nh s√°ch T√†i nguy√™n v√† M√¥i tr∆∞·ªùng",
                    "Tr∆∞·ªùng ƒê·∫°i h·ªçc T√†i nguy√™n v√† M√¥i tr∆∞·ªùng H√† N·ªôi", "Tr∆∞·ªùng ƒê·∫°i h·ªçc T√†i nguy√™n v√† M√¥i tr∆∞·ªùng TP. HCM",
                    "Qu·ªπ B·∫£o v·ªá m√¥i tr∆∞·ªùng Vi·ªát Nam"
                ]]
                st.rerun()

        st.markdown('<hr>', unsafe_allow_html=True)

    with col_viewer:
        if "example_pdf_url" not in st.session_state:
            st.session_state.example_pdf_url = ""
        if st.session_state.example_pdf_url:
            st.markdown('<hr>', unsafe_allow_html=True)
            st.markdown('<h4>üìñ PDF Viewer</h4>', unsafe_allow_html=True)
            with st.spinner("üìÑ Loading PDF..."):
                pdf_data = requests.get(st.session_state.example_pdf_url, timeout=30).content
                base64_pdf = base64.b64encode(pdf_data).decode('utf-8')
                st.markdown(
                    f"""
                    <embed src="data:application/pdf;base64,{base64_pdf}" width="100%" height="800px" type="application/pdf">
                    """,
                    unsafe_allow_html=True
                )
            st.markdown('<hr>', unsafe_allow_html=True)
        else:
            st.markdown(
                """
                <div style='text-align: center;'>
                    <h4>üìÑ No PDF Selected</h4>
                    <p>Select an example to view the document here</p>
                </div>
                """,
                unsafe_allow_html=True
            )



##################################### chatbot


elif function_choice == "üí¨ Q&A Chatbot":
    #st.markdown('<h1 class="main-header">ü§ñ Q&A Chatbot</h1>', unsafe_allow_html=True)
    # Session state initialization
    st.session_state.setdefault("messages", [])
    st.session_state.setdefault("selected_question", None)
    st.session_state.setdefault("gold_answer", "")
    st.session_state.setdefault("model_answer", "")

    # Questions data with complete answers
    QUESTIONS = [
        {
            "icon": "üå±", 
            "title": "TƒÉng c∆∞·ªùng ki·ªÉm tra m√¥i tr∆∞·ªùng", 
            "question": "C·ª≠ tri ƒë·ªÅ ngh·ªã B·ªô T√†i nguy√™n v√† M√¥i tr∆∞·ªùng ch·ªâ ƒë·∫°o tƒÉng c∆∞·ªùng ki·ªÉm tra, gi√°m s√°t ch·∫∑t ch·∫Ω v·ªÅ m√¥i tr∆∞·ªùng l√†ng ngh·ªÅ, doanh nghi·ªáp x·∫£ th·∫£i l·ªõn tr√™n to√†n qu·ªëc v√† c√≥ chi·∫øn l∆∞·ª£c nghi√™n c·ª©u ·ª©ng d·ª•ng khoa h·ªçc c√¥ng ngh·ªá x·ª≠ l√Ω r√°c th·∫£i ƒë·∫£m b·∫£o m√¥i tr∆∞·ªùng ƒë·ªÉ c√°c ƒë·ªãa ph∆∞∆°ng ƒë∆∞a v√†o √°p d·ª•ng x·ª≠ l√Ω t·∫°i ch·ªó ƒë·∫°t y√™u c·∫ßu",
            "answer": """Vi·ªác tƒÉng c∆∞·ªùng ki·ªÉm tra, gi√°m s√°t ch·∫∑t ch·∫Ω v·ªÅ m√¥i tr∆∞·ªùng ƒë·ªëi v·ªõi c√°c doanh nghi·ªáp x·∫£ th·∫£i l·ªõn, l√†ng ngh·ªÅ l√† tr√°ch nhi·ªám kh√¥ng ch·ªâ c·ªßa B·ªô T√†i nguy√™n v√† M√¥i tr∆∞·ªùng m√† c√≤n c·ªßa c√°c ƒë·ªãa ph∆∞∆°ng, ƒë√£ ƒë∆∞·ª£c quy ƒë·ªãnh c·ª• th·ªÉ trong c√°c vƒÉn b·∫£n quy ph·∫°m ph√°p lu·∫≠t, vƒÉn b·∫£n ch·ªâ ƒë·∫°o nh∆∞ Ngh·ªã ƒë·ªãnh s·ªë 19/2015/Nƒê-CP ng√†y 14/02/2015 c·ªßa Ch√≠nh ph·ªß quy ƒë·ªãnh chi ti·∫øt thi h√†nh m·ªôt s·ªë ƒêi·ªÅu c·ªßa Lu·∫≠t b·∫£o v·ªá m√¥i tr∆∞·ªùng, Ch·ªâ th·ªã s·ªë 25/CT-TTg ng√†y 31/8/2016 c·ªßa Th·ªß t∆∞·ªõng Ch√≠nh ph·ªß v·ªÅ m·ªôt s·ªë nhi·ªám v·ª•, gi·∫£i ph√°p c·∫•p b√°ch v·ªÅ b·∫£o v·ªá m√¥i tr∆∞·ªùng. Hi·ªán nay, B·ªô T√†i nguy√™n v√† M√¥i tr∆∞·ªùng ƒë√£ x√¢y d·ª±ng ƒê·ªÅ √°n ki·ªÉm so√°t ƒë·∫∑c bi·ªát ƒë·ªëi v·ªõi c√°c ngu·ªìn th·∫£i l·ªõn ƒë√£ ƒë∆∞·ª£c Th·ªß t∆∞·ªõng Ch√≠nh ph·ªß ph√™ duy·ªát v√† s·∫Ω t·ªï ch·ª©c th·ª±c hi·ªán trong nƒÉm 2018 v√† c√°c nƒÉm ti·∫øp theo."""
        },
        {
            "icon": "üó∫Ô∏è", 
            "title": "Quy ho·∫°ch qu·ªπ ƒë·∫•t d√¢n t·ªôc", 
            "question": "ƒê·ªÅ ngh·ªã Nh√† n∆∞·ªõc quy ho·∫°ch qu·ªπ ƒë·∫•t, s·∫Øp x·∫øp l·∫°i c√°c khu d√¢n c∆∞ ƒë·ªìng b√†o M√¥ng, Dao, Kh∆° M√∫ hi·ªán nay ƒëang s·ªëng ·ªü khu v·ª±c ƒë·ªìi, n√∫i cao, nh·ªè l·∫ª chuy·ªÉn xu·ªëng khu v·ª±c th·∫•p h∆°n sinh s·ªëng t·∫≠p trung khoa h·ªçc, h·ª£p l√Ω ƒë·ªÉ khai hoang ru·ªông b·∫≠c thang cho ƒë·ªìng b√†o canh t√°c tr·ªìng l√∫a n∆∞·ªõc, tr·ªìng m√†u c·∫°n, tr·ªìng r·ª´ng‚Ä¶ƒë·ªÉ ·ªïn ƒë·ªãnh ƒë·ªùi s·ªëng v√† c√≥ ƒëi·ªÅu ki·ªán ph√°t tri·ªÉn.",
            "answer": "ƒê·ªÉ ƒë√°p ·ª©ng qu·ªπ ƒë·∫•t cho nhu c·∫ßu v·ªÅ nh√† ·ªü, ƒë·∫•t s·∫£n xu·∫•t n√¥ng nghi·ªáp, B·ªô T√†i nguy√™n v√† M√¥i tr∆∞·ªùng ƒë√£ tr√¨nh Ch√≠nh ph·ªß ƒë·ªÉ tr√¨nh Qu·ªëc h·ªôi ban h√†nh Ngh·ªã quy·∫øt s·ªë 134/2016/QH13 ph√™ duy·ªát ƒëi·ªÅu ch·ªânh quy ho·∫°ch s·ª≠ d·ª•ng ƒë·∫•t ƒë·∫øn nƒÉm 2020 v√† k·∫ø ho·∫°ch s·ª≠ d·ª•ng ƒë·∫•t k·ª≥ cu·ªëi (2016-2020) c·∫•p qu·ªëc gia trong ƒë√≥ c√≥ b·ªë tr√≠ qu·ªπ ·ªü, ƒë·∫•t s·∫£n xu·∫•t n√¥ng nghi·ªáp cho c√°c nhu c·∫ßu ph√°t tri·ªÉn kinh t·∫ø - x√£ h·ªôi c≈©ng nh∆∞ gi·∫£i quy·∫øt qu·ªπ ƒë·∫•t cho ƒë·ªìng b√†o d√¢n t·ªôc thi·ªÉu s·ªë."
        },
        {
            "icon": "üìú", 
            "title": "Giao ƒë·∫•t n√¥ng tr∆∞·ªùng", 
            "question": "C√°c x√£: Th√†nh V√¢n, V√¢n Du, Th√†nh T√¢m huy·ªán Th·∫°ch Th√†nh, t·ªânh Thanh H√≥a ƒë·ªÅ ngh·ªã c√°c ng√†nh c√≥ li√™n quan gi·∫£i quy·∫øt giao ƒë·∫•t c·ªßa c√°c N√¥ng tr∆∞·ªùng Th√†nh V√¢n, V√¢n Du, Th√†nh T√¢m cho ng∆∞·ªùi d√¢n qu·∫£n l√Ω, s·ª≠ d·ª•ng",
            "answer": "Theo quy ƒë·ªãnh t·∫°i ƒêi·ªÅu 59 v√† ƒêi·ªÅu 66 Lu·∫≠t ƒë·∫•t ƒëai hi·ªán h√†nh th√¨ v·∫•n ƒë·ªÅ c·ªßa c·ª≠ tri ki·∫øn ngh·ªã thu·ªôc th·∫©m quy·ªÅn c·ªßa ·ª¶y ban nh√¢n d√¢n c·∫•p t·ªânh, c·∫•p huy·ªán. ƒê·ªëi v·ªõi ch·ªâ ƒë·∫°o c·ªßa Trung ∆∞∆°ng, B·ªô T√†i nguy√™n v√† M√¥i tr∆∞·ªùng b√°o c√°o th√™m: Th·ª±c hi·ªán Ngh·ªã quy·∫øt s·ªë 28-NQ/TW, Ngh·ªã ƒë·ªãnh s·ªë 170/2004/Nƒê-CP, Ngh·ªã ƒë·ªãnh s·ªë 200/2004/Nƒê-CP v√† Ngh·ªã ƒë·ªãnh s·ªë 118/2014/Nƒê-CP, c√°c ƒë·ªãa ph∆∞∆°ng ph·∫£i r√† so√°t l·∫°i ƒë·∫•t ƒëai, b√†n giao v·ªÅ ƒë·ªãa ph∆∞∆°ng ph·∫ßn di·ªán t√≠ch ƒë·∫•t s·ª≠ d·ª•ng sai m·ª•c ƒë√≠ch, k√©m ho·∫∑c kh√¥ng hi·ªáu qu·∫£."
        }
    ]

    def send_message(text: str, is_example: bool = False, example_index: int = None) -> None:
        """Send a message and fetch AI response."""
        if not text.strip():
            return
        
        # Add user message
        st.session_state.messages.append({"role": "user", "content": text})
        
        # If this is an example question, set the gold answer
        if is_example and example_index is not None:
            st.session_state.gold_answer = QUESTIONS[example_index]["answer"]
        else:
            st.session_state.gold_answer = ""
        
        # API call to get model response
        payload = {
            "fallback_response": "Hi·ªán m√¨nh ch∆∞a c√≥ ƒë·ªß th√¥ng tin ƒë·ªÉ tr·∫£ l·ªùi y√™u c·∫ßu c·ªßa b·∫°n. B·∫°n vui l√≤ng m√¥ t·∫£ th√™m m·ªôt ch√∫t nh√©!",
            "query": text,
            "collection_name": "cb92553d-c21e-4921-b036-de0bb290a773",
            "history": [], "slots": [], "activate_slots": False, "activate_history": False
        }
        
        with st.spinner("ü§ñ AI ƒëang suy nghƒ©..."):
            try:
                response = requests.post("http://1.53.58.232:5558/chatbot-answer/", json=payload, timeout=300)
                answer = response.json().get("message", "No response available") if response.status_code == 200 else f"‚ö†Ô∏è Service unavailable ({response.status_code})"
            except requests.RequestException:
                answer = "üîå Connection issue. Please try again."
        
        # Store model answer and add to messages
        st.session_state.model_answer = answer
        st.session_state.messages.append({"role": "assistant", "content": answer})
        st.session_state.selected_question = None
        st.rerun()

    # Beautiful Header
    st.markdown("""
    <div style="background:linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                padding:2rem;border-radius:15px;margin-bottom:2rem;color:white;text-align:center;">
        <h1 style="margin:0;font-size:2.5rem;">ü§ñ AI Q&A Assistant</h1>
        <p style="margin:0.5rem 0 0 0;font-size:1.2rem;opacity:0.9;">
            H·ªèi ƒë√°p th√¥ng minh v·ªõi AI
        </p>
    </div>
    """, unsafe_allow_html=True)

    # Main Layout: Chat + Question Selection
    col_chat, col_sidebar = st.columns([2.5, 1])

    # === CHAT SECTION ===
    with col_chat:
        # Chat header with stats
        chat_header_col1, chat_header_col2 = st.columns([3, 1])
        with chat_header_col1:
            st.markdown("### üí¨ Cu·ªôc h·ªôi tho·∫°i")
        with chat_header_col2:
            if st.button("üóëÔ∏è X√≥a h·∫øt", key="clear_all", use_container_width=True):
                st.session_state.messages = []
                st.session_state.gold_answer = ""
                st.session_state.model_answer = ""
                st.session_state.selected_question = None
                st.rerun()

        # Chat messages container
        chat_container = st.container(height=400)
        with chat_container:
            if st.session_state.messages:
                for msg in st.session_state.messages:
                    with st.chat_message(msg["role"]):
                        st.markdown(msg["content"])
            else:
                st.markdown("""
                <div style="text-align:center;padding:3rem;color:#666;">
                    <div style="font-size:4rem;margin-bottom:1rem;">üí≠</div>
                    <h3>Ch√†o m·ª´ng ƒë·∫øn v·ªõi AI Assistant!</h3>
                    <p>H√£y ƒë·∫∑t c√¢u h·ªèi ho·∫∑c ch·ªçn c√¢u h·ªèi m·∫´u b√™n ph·∫£i ‚Üí</p>
                </div>
                """, unsafe_allow_html=True)

        # Chat input
        if prompt := st.chat_input("üí¨ ƒê·∫∑t c√¢u h·ªèi c·ªßa b·∫°n..."):
            send_message(prompt)

    # === SIDEBAR: Question Selection ===
    with col_sidebar:
        st.markdown("### ‚ö° Ch·ªçn c√¢u h·ªèi m·∫´u")
        
        # Create selectbox options
        question_options = ["-- Ch·ªçn c√¢u h·ªèi --"] + [f"{q['icon']} {q['title']}" for q in QUESTIONS]
        
        selected_index = st.selectbox(
            "Danh s√°ch c√¢u h·ªèi:",
            options=range(len(question_options)),
            format_func=lambda x: question_options[x],
            index=0,
            key="question_selectbox"
        )
        
        # Update selected question when selectbox changes
        if selected_index > 0:
            st.session_state.selected_question = selected_index - 1
        else:
            st.session_state.selected_question = None
        
        # Question preview and action section
        if st.session_state.selected_question is not None:
            q = QUESTIONS[st.session_state.selected_question]
            
            # Enhanced question display box with fixed height and scroll
            st.markdown("### üìã Chi ti·∫øt c√¢u h·ªèi")
            st.markdown(f"""
            <div style="background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
                        border: 2px solid #2196f3;
                        border-radius: 12px;
                        padding: 1.5rem;
                        margin: 1rem 0;
                        height: 250px;
                        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
                        display: flex;
                        flex-direction: column;">
                <div style="display: flex; align-items: center; margin-bottom: 1rem; flex-shrink: 0;">
                    <span style="font-size: 2rem; margin-right: 0.5rem;">{q['icon']}</span>
                    <h4 style="margin: 0; color: #1565c0; font-weight: bold;">{q['title']}</h4>
                </div>
                <div style="background: rgba(255,255,255,0.7); 
                           padding: 1rem; 
                           border-radius: 8px;
                           border-left: 4px solid #2196f3;
                           color: #0d47a1;
                           line-height: 1.6;
                           font-size: 0.95rem;
                           flex: 1;
                           overflow-y: auto;">
                    <strong>C√¢u h·ªèi:</strong><br>
                    {q['question']}
                </div>
            </div>
            """, unsafe_allow_html=True)
            
            # Action button
            if st.button("üöÄ G·ª≠i c√¢u h·ªèi n√†y", key=f"ask_{st.session_state.selected_question}", use_container_width=True, type="primary"):
                send_message(q["question"], is_example=True, example_index=st.session_state.selected_question)

    # === ANSWER COMPARISON SECTION ===
    if st.session_state.get("gold_answer") and st.session_state.get("model_answer"):
        st.markdown("---")
        st.markdown("### üìä So s√°nh c√¢u tr·∫£ l·ªùi")
        
        col_gold, col_model = st.columns(2)
        
        with col_gold:
            st.markdown("""
            <div style="border: 2px solid #ff9800;
                        border-radius: 12px;
                        background: linear-gradient(135deg, #fff8e1 0%, #ffecb3 100%);
                        height: 400px;
                        overflow-y: auto;
                        box-shadow: 0 4px 8px rgba(255,152,0,0.2);">
                <div style="padding: 1.5rem;">
                    <div style="display: flex; align-items: center; margin-bottom: 1rem;">
                        <span style="font-size: 1.5rem; margin-right: 0.5rem;">üèÜ</span>
                        <h4 style="margin: 0; color: #e65100; font-weight: bold;">C√¢u tr·∫£ l·ªùi chu·∫©n</h4>
                    </div>
                    <div style="background: rgba(255,255,255,0.8);
                               padding: 1rem;
                               border-radius: 8px;
                               border-left: 4px solid #ff9800;
                               color: #bf360c;
                               line-height: 1.6;
                               white-space: pre-wrap;
                               font-size: 0.9rem;">""" + 
                f"{st.session_state.gold_answer}" + 
                """</div>
                </div>
            </div>
            """, unsafe_allow_html=True)
        
        with col_model:
            st.markdown("""
            <div style="border: 2px solid #4caf50;
                        border-radius: 12px;
                        background: linear-gradient(135deg, #e8f5e8 0%, #c8e6c9 100%);
                        height: 400px;
                        overflow-y: auto;
                        box-shadow: 0 4px 8px rgba(76,175,80,0.2);">
                <div style="padding: 1.5rem;">
                    <div style="display: flex; align-items: center; margin-bottom: 1rem;">
                        <span style="font-size: 1.5rem; margin-right: 0.5rem;">ü§ñ</span>
                        <h4 style="margin: 0; color: #2e7d32; font-weight: bold;">AI Generated</h4>
                    </div>
                    <div style="background: rgba(255,255,255,0.8);
                               padding: 1rem;
                               border-radius: 8px;
                               border-left: 4px solid #4caf50;
                               color: #1b5e20;
                               line-height: 1.6;
                               white-space: pre-wrap;
                               font-size: 0.9rem;">""" + 
                f"{st.session_state.model_answer}" + 
                """</div>
                </div>
            </div>
            """, unsafe_allow_html=True)
        
        # Enhanced comparison actions
        st.markdown("<br>", unsafe_allow_html=True)
        col1, col2, col3 = st.columns([1, 1, 1])
        
        with col1:
            if st.button("üìã Copy C√¢u tr·∫£ l·ªùi chu·∫©n", use_container_width=True, type="secondary"):
                st.code(st.session_state.gold_answer, language="text")
        
        with col2:
            if st.button("ü§ñ Copy AI Answer", use_container_width=True, type="secondary"):
                st.code(st.session_state.model_answer, language="text")
        
        with col3:
            if st.button("üóëÔ∏è X√≥a so s√°nh", use_container_width=True):
                st.session_state.gold_answer = ""
                st.session_state.model_answer = ""

                st.rerun()
