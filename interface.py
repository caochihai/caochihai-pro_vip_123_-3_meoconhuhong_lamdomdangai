import streamlit as st
import requests
import base64
from requests.exceptions import RequestException, Timeout, ConnectionError

st.set_page_config(
    layout="wide", 
    page_title="AI Document Processor", 
    page_icon="üìÑ",
    initial_sidebar_state="expanded"
)

# Unified CSS for color synchronization
st.markdown("""
<style>
    /* General Reset and Base Styles */
    * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
    }

    /* Main Container Styles */
    .main-header {
        text-align: center;
        color: #2c3e50;
        font-size: 3rem;
        font-weight: 700;
        margin-bottom: 2rem;
    }

    .section-header {
        color: #2c3e50;
        font-size: 1.5rem;
        font-weight: 600;
        margin: 1rem 0;
    }

    /* Buttons */
    .stButton > button {
        background: #3498db;
        color: #ffffff;
        border: none;
        border-radius: 8px;
        padding: 0.75rem 2rem;
        font-weight: 500;
        transition: background-color 0.3s ease;
    }

    .stButton > button:hover {
        background: #2980b9;
    }

    /* Cards and Containers */
    .floating-card {
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 10px;
        padding: 2rem;
        margin-bottom: 1.5rem;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .summary-box {
        background: #f8f9fa;
        color: #2c3e50;
        padding: 1.5rem;
        border-radius: 8px;
        border-left: 4px solid #3498db;
        max-height: 400px;
        overflow-y: auto;
        line-height: 1.6;
    }

    .chat-container {
        background: #ffffff;
        border: 1px solid #e9ecef;
        border-radius: 12px;
        padding: 1.5rem;
        min-height: 400px;
        max-height: 600px;
        overflow-y: auto;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }

    /* Sample Answer and Question Boxes */
    .sample-answer-container {
        background: #f8f9fa;
        border: 2px solid #3498db;
        border-radius: 12px;
        padding: 1.5rem;
        margin: 1rem 0;
        box-shadow: 0 4px 8px rgba(52, 152, 219, 0.1);
    }

    .sample-answer-header {
        background: #3498db;
        color: #ffffff;
        padding: 0.75rem 1rem;
        border-radius: 8px;
        font-weight: 600;
        margin-bottom: 1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .sample-answer-content {
        color: #2c3e50;
        line-height: 1.6;
        font-size: 0.95rem;
        background: #ffffff;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #27ae60;
    }

    .question-sample-box {
        background: #f8f9fa;
        border: 2px solid #f39c12;
        border-radius: 10px;
        padding: 1rem;
        margin-bottom: 1rem;
    }

    .question-header {
        background: #f39c12;
        color: #ffffff;
        padding: 0.5rem 1rem;
        border-radius: 6px;
        font-weight: 600;
        margin-bottom: 0.5rem;
        font-size: 0.9rem;
    }

    .question-content {
        color: #2c3e50;
        line-height: 1.4;
        font-size: 0.85rem;
        font-style: italic;
    }

    /* Chatbot Specific Styles */
    .header {
        background: linear-gradient(135deg, #3498db, #2980b9);
        padding: 2rem;
        border-radius: 15px;
        margin-bottom: 2rem;
        color: #ffffff;
        text-align: center;
    }

    .stats {
        display: flex;
        justify-content: center;
        gap: 2rem;
        margin-top: 1.5rem;
    }

    .stat {
        background: rgba(255, 255, 255, 0.2);
        padding: 0.8rem 1.5rem;
        border-radius: 10px;
    }

    .chat-box {
        background: #ffffff;
        border-radius: 15px;
        padding: 1.5rem;
        margin-bottom: 1rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }

    .sidebar {
        background: #f8f9fa;
        border-radius: 15px;
        padding: 1.5rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }

    .preview {
        background: #f8f9fa;
        border: 2px solid #f39c12;
        border-radius: 15px;
        padding: 1rem;
        margin-bottom: 1rem;
        max-height: 400px;
        overflow-y: auto;
    }

    .preview-answer {
        background: #f0fdf4;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #27ae60;
        line-height: 1.6;
    }

    .empty {
        text-align: center;
        padding: 3rem 2rem;
        color: #2c3e50;
    }

    .chat-section-divider {
        border: none;
        height: 2px;
        background: linear-gradient(90deg, transparent, #3498db, transparent);
        margin: 2rem 0;
    }

    @media (max-width: 768px) {
        .stats {
            flex-direction: column;
            gap: 0.5rem;
        }
    }
</style>
""", unsafe_allow_html=True)

# Initialize session state with separate variables for different sections
for key in ["pdf_url", "pdf_summary", "classification_summary", "agency", "messages", "chat_input_value"]:
    if key not in st.session_state:
        st.session_state[key] = [] if key == "messages" else ""

# Main title
st.markdown('<h1 class="main-header">üìÑ Document Processor</h1>', unsafe_allow_html=True)

# Sidebar
st.sidebar.markdown("""
<div style="background: #34495e; color: white; 
           padding: 2rem; margin: -1rem -1rem 2rem -1rem; border-radius: 0 0 10px 10px;">
    <h2 style="text-align: center; margin: 0;">‚ö° Functions</h2>
</div>
""", unsafe_allow_html=True)

function_choice = st.sidebar.selectbox(
    "Choose your AI tool:",
    ["üìÑ PDF Text Summarizer", "üè∑Ô∏è Document Classification", "üí¨ Q&A Chatbot"],
    key="function_selector"
)


if function_choice == "üìÑ PDF Text Summarizer":
    # Create two columns with different ratios
    col_input, col_viewer = st.columns([1, 2], gap="large")
    
    with col_input:
        # Input section with beautiful container
        st.markdown('<div class="floating-card">', unsafe_allow_html=True)
        st.markdown('<h2 class="section-header">üìé PDF Input</h2>', unsafe_allow_html=True)
        
        pdf_url = st.text_input(
            "üîó Enter PDF URL:",
            value=st.session_state.pdf_url,
            placeholder="Paste your PDF link here...",
            help="Enter a direct link to your PDF file"
        )
        st.session_state.pdf_url = pdf_url
        
        # Stylish button
        if st.button("‚ú® Generate Summary", use_container_width=True, type="primary"):
            if pdf_url:
                with st.spinner("üìÑ Processing PDF..."):
                    try:
                        response = requests.post(
                            "http://1.53.58.232:8521/summarize_pdf",
                            json={"pdf_url": pdf_url},
                            timeout=150
                        )
                        if response.status_code == 200:
                            result = response.json()
                            if "summary" in result:
                                st.success("‚úÖ Summary completed!")
                                # Store model summary separately from sample summary
                                st.session_state.model_summary = result["summary"]
                            else:
                                st.session_state.model_summary = "No summary data available."
                        else:
                            st.session_state.model_summary = f"Error: {response.status_code}"
                    except Exception as e:
                        st.error(f"‚ùå Error: {str(e)}")
                        st.session_state.model_summary = f"Error: {str(e)}"
            else:
                st.warning("‚ö†Ô∏è Please enter a PDF URL first")
        
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Summary section with comparison
        if st.session_state.pdf_summary or (hasattr(st.session_state, 'model_summary') and st.session_state.model_summary):
            st.markdown('<div class="floating-card" style="margin-top: 2rem;">', unsafe_allow_html=True)
            st.markdown('<h2 class="section-header">üìù Summary Comparison</h2>', unsafe_allow_html=True)
            
            # Create tabs for comparison
            tab1, tab2 = st.tabs(["üìã Sample Summary", "ü§ñ Model Generated"])
            
            with tab1:
                if st.session_state.pdf_summary:
                    st.markdown(
                        f"""
                        <div class="summary-box" style="background-color: #f8f9fa; border-left: 4px solid #007bff;">
                            {st.session_state.pdf_summary}
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                else:
                    st.info("üìã Sample summary will appear here when you select an example")
            
            with tab2:
                if hasattr(st.session_state, 'model_summary') and st.session_state.model_summary:
                    st.markdown(
                        f"""
                        <div class="summary-box" style="background-color: #f0fff4; border-left: 4px solid #28a745;">
                            {st.session_state.model_summary}
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                else:
                    st.info("ü§ñ Model-generated summary will appear here after clicking 'Generate Summary'")
            
            st.markdown('</div>', unsafe_allow_html=True)
        
        # Example buttons section
        st.markdown('<div class="floating-card" style="margin-top: 2rem;">', unsafe_allow_html=True)
        st.markdown('<h3 class="section-header">üìå Examples</h3>', unsafe_allow_html=True)
        
        col1, col2, col3 = st.columns(3)
        with col1:
            if st.button("üìå example 1", use_container_width=True):
                st.session_state.pdf_url = "https://vbpl.vn/FileData/TW/Lists/vbpq/Attachments/176983/VanBanGoc_645029.pdf"
                # Set sample summary for example 1
                st.session_state.pdf_summary = """
**T√ìM T·∫ÆT VƒÇN B·∫¢N** \n
T√™n vƒÉn b·∫£n: Th√¥ng t∆∞ s·ªë ‚Ä¶/2025/TT-BTNMT ban h√†nh Quy chu·∫©n k·ªπ thu·∫≠t qu·ªëc gia v·ªÅ n∆∞·ªõc th·∫£i sinh ho·∫°t v√† n∆∞·ªõc th·∫£i ƒë√¥ th·ªã, khu d√¢n c∆∞ t·∫≠p trung (QCVN 14:2025/BTNMT).
C∆° quan ban h√†nh: B·ªô T√†i nguy√™n v√† M√¥i tr∆∞·ªùng.
Th·ªùi ƒëi·ªÉm ban h√†nh: NƒÉm 2025.
Ng∆∞·ªùi k√Ω: Th·ª© tr∆∞·ªüng L√™ C√¥ng Th√†nh.

1. **Ph·∫°m vi v√† ƒë·ªëi t∆∞·ª£ng √°p d·ª•ng** \n
Quy ƒë·ªãnh gi√° tr·ªã gi·ªõi h·∫°n cho ph√©p c·ªßa c√°c th√¥ng s·ªë √¥ nhi·ªÖm trong n∆∞·ªõc th·∫£i sinh ho·∫°t, n∆∞·ªõc th·∫£i ƒë√¥ th·ªã, khu d√¢n c∆∞ t·∫≠p trung khi x·∫£ ra ngu·ªìn ti·∫øp nh·∫≠n.
√Åp d·ª•ng cho m·ªçi c∆° quan, t·ªï ch·ª©c, c√° nh√¢n c√≥ ho·∫°t ƒë·ªông x·∫£ th·∫£i (tr·ª´ tr∆∞·ªùng h·ª£p c√≥ c√¥ng tr√¨nh x·ª≠ l√Ω t·∫°i ch·ªó).

2. **Hi·ªáu l·ª±c v√† thay th·∫ø** \n
C√≥ hi·ªáu l·ª±c t·ª´ nƒÉm 2025 (ng√†y c·ª• th·ªÉ ch∆∞a ƒëi·ªÅn).
Thay th·∫ø QCVN 14:2008/BTNMT.
Giai ƒëo·∫°n chuy·ªÉn ti·∫øp:
C√°c d·ª± √°n, c∆° s·ªü ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát ho·∫∑c n·ªôp h·ªì s∆° tr∆∞·ªõc th·ªùi ƒëi·ªÉm hi·ªáu l·ª±c v·∫´n √°p d·ª•ng QCVN 14:2008/BTNMT v√† QCVN 40:2011/BTNMT ƒë·∫øn h·∫øt 31/12/2031.
T·ª´ 01/01/2032: b·∫Øt bu·ªôc √°p d·ª•ng QCVN 14:2025/BTNMT.

3. **Quy ƒë·ªãnh k·ªπ thu·∫≠t** \n
ƒê∆∞a ra gi√° tr·ªã gi·ªõi h·∫°n th√¥ng s·ªë √¥ nhi·ªÖm (pH, BOD5, COD/TOC, TSS, Amoni, Nit∆° t·ªïng, Photpho t·ªïng, Coliform, Sunfua, d·∫ßu m·ª°, ch·∫•t ho·∫°t ƒë·ªông b·ªÅ m·∫∑t‚Ä¶) t·∫°i B·∫£ng 1 v√† B·∫£ng 2.
Ph√¢n lo·∫°i theo c·ªôt A, B, C t√πy theo ch·ª©c nƒÉng ngu·ªìn ti·∫øp nh·∫≠n n∆∞·ªõc th·∫£i (c·∫•p n∆∞·ªõc sinh ho·∫°t, c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng m√¥i tr∆∞·ªùng, ho·∫∑c ngu·ªìn kh√°c) v√† quy m√¥ l∆∞u l∆∞·ª£ng x·∫£ th·∫£i.

4. **Ph∆∞∆°ng ph√°p x√°c ƒë·ªãnh**\n
Th·ª±c hi·ªán theo TCVN, SMEWW, ISO, US EPA Method.
C√≥ quy ƒë·ªãnh ph∆∞∆°ng ph√°p tr·ªçng t√†i trong tr∆∞·ªùng h·ª£p c√≥ tranh ch·∫•p k·∫øt qu·∫£.

5. **Qu·∫£n l√Ω v√† tu√¢n th·ªß**\n
Th√¥ng s·ªë gi·ªõi h·∫°n ph·∫£i ghi r√µ trong b√°o c√°o ƒêTM, gi·∫•y ph√©p m√¥i tr∆∞·ªùng, vƒÉn b·∫£n ƒëƒÉng k√Ω m√¥i tr∆∞·ªùng.
Ki·ªÉm so√°t th√™m Clo, Chloroform n·∫øu d√πng Clo kh·ª≠ tr√πng; th√¥ng s·ªë ƒë·∫∑c tr∆∞ng kh√°c n·∫øu c√≥ ƒë·∫•u n·ªëi n∆∞·ªõc th·∫£i c√¥ng nghi·ªáp.
Quan tr·∫Øc v√† b√°o c√°o ph·∫£i do ƒë∆°n v·ªã c√≥ gi·∫•y ch·ª©ng nh·∫≠n d·ªãch v·ª• quan tr·∫Øc m√¥i tr∆∞·ªùng th·ª±c hi·ªán.

6. **Tr√°ch nhi·ªám**\n
Ch·ªß c∆° s·ªü, d·ª± √°n: ƒë·∫£m b·∫£o n∆∞·ªõc th·∫£i ƒë·∫°t chu·∫©n tr∆∞·ªõc khi x·∫£; x√°c ƒë·ªãnh ƒë√∫ng th√¥ng s·ªë √¥ nhi·ªÖm c·∫ßn ki·ªÉm so√°t.
C∆° quan qu·∫£n l√Ω: th·∫©m ƒë·ªãnh, c·∫•p ph√©p, ki·ªÉm tra gi√°m s√°t.
UBND c·∫•p t·ªânh: r√† so√°t, ƒëi·ªÅu ch·ªânh quy chu·∫©n ƒë·ªãa ph∆∞∆°ng ph√π h·ª£p v·ªõi QCVN m·ªõi.

7. **Ph·ª• l·ª•c k√®m theo**\n
Ph·ª• l·ª•c 1: Danh m·ª•c lo·∫°i h√¨nh kinh doanh, d·ªãch v·ª• ƒë∆∞·ª£c qu·∫£n l√Ω nh∆∞ n∆∞·ªõc th·∫£i sinh ho·∫°t (kh√°ch s·∫°n, nh√† ngh·ªâ, k√Ω t√∫c x√°, c∆° s·ªü y t·∫ø, d·ªãch v·ª• ƒÉn u·ªëng, gi·∫∑t l√†, massage, tr∆∞·ªùng h·ªçc, doanh tr·∫°i, khu chung c∆∞, si√™u th·ªã, c√¥ng vi√™n, b·∫øn xe, v.v.).
Ph·ª• l·ª•c 2: Ph∆∞∆°ng ph√°p l·∫•y m·∫´u, ph√¢n t√≠ch c√°c th√¥ng s·ªë √¥ nhi·ªÖm trong n∆∞·ªõc th·∫£i.\n

Th√¥ng t∆∞ 2025/TT-BTNMT ban h√†nh QCVN 14:2025/BTNMT quy ƒë·ªãnh gi·ªõi h·∫°n c√°c th√¥ng s·ªë √¥ nhi·ªÖm trong n∆∞·ªõc th·∫£i sinh ho·∫°t v√† n∆∞·ªõc th·∫£i ƒë√¥ th·ªã, thay th·∫ø QCVN 14:2008/BTNMT. VƒÉn b·∫£n ƒë∆∞a ra l·ªô tr√¨nh √°p d·ª•ng ƒë·∫øn 2032, quy ƒë·ªãnh chi ti·∫øt v·ªÅ gi·ªõi h·∫°n k·ªπ thu·∫≠t, ph∆∞∆°ng ph√°p quan tr·∫Øc, tr√°ch nhi·ªám c·ªßa c∆° quan qu·∫£n l√Ω v√† c∆° s·ªü x·∫£ th·∫£i, ƒë·ªìng th·ªùi k√®m ph·ª• l·ª•c v·ªÅ lo·∫°i h√¨nh √°p d·ª•ng v√† ph∆∞∆°ng ph√°p th·ª≠ nghi·ªám.
                """
                st.rerun()
        with col2:
            if st.button("üìå example 2", use_container_width=True):
                st.session_state.pdf_url = "https://vbpl.vn/FileData/TW/Lists/vbpq/Attachments/175320/VanBanGoc_2025.%20TT%20Dieutra%20dien%20NL%20tai%20tao.pdf"
                # Set sample summary for example 2
                st.session_state.pdf_summary = """
**T√ìM T·∫ÆT VƒÇN B·∫¢N**\n
T√™n vƒÉn b·∫£n: Th√¥ng t∆∞ s·ªë ‚Ä¶/2025/TT-BTNMT quy ƒë·ªãnh chi ti·∫øt ph·∫°m vi ƒëi·ªÅu tra c∆° b·∫£n v·ªÅ t√†i nguy√™n ƒëi·ªán nƒÉng l∆∞·ª£ng t√°i t·∫°o v√† nƒÉng l∆∞·ª£ng m·ªõi.
C∆° quan ban h√†nh: B·ªô T√†i nguy√™n v√† M√¥i tr∆∞·ªùng.
Ng∆∞·ªùi k√Ω: Th·ª© tr∆∞·ªüng L√™ Minh Ng√¢n.
Hi·ªáu l·ª±c: NƒÉm 2025.

1. **Ph·∫°m vi v√† ƒë·ªëi t∆∞·ª£ng √°p d·ª•ng**\n
Quy ƒë·ªãnh v·ªÅ ƒëi·ªÅu tra c∆° b·∫£n c√°c d·∫°ng ƒëi·ªán nƒÉng l∆∞·ª£ng t√°i t·∫°o v√† nƒÉng l∆∞·ª£ng m·ªõi:
ƒêi·ªán m·∫∑t tr·ªùi, ƒëi·ªán gi√≥, ƒë·ªãa nhi·ªát, s√≥ng bi·ªÉn, th·ªßy tri·ªÅu, ch·∫•t th·∫£i r·∫Øn, sinh kh·ªëi, th·ªßy ƒëi·ªán.
√Åp d·ª•ng cho c∆° quan qu·∫£n l√Ω, t·ªï ch·ª©c, c√° nh√¢n li√™n quan ƒë·∫øn ƒëi·ªÅu tra ngu·ªìn ƒëi·ªán t√°i t·∫°o.

2. **Nguy√™n t·∫Øc v√† y√™u c·∫ßu**\n
Thu th·∫≠p d·ªØ li·ªáu ph·ª•c v·ª• quy ho·∫°ch ƒëi·ªán l·ª±c v√† quy ho·∫°ch t·ªânh.
∆Øu ti√™n v√πng c√≥ ti·ªÅm nƒÉng cao, h·∫° t·∫ßng l∆∞·ªõi ƒëi·ªán thu·∫≠n l·ª£i, khu v·ª±c thi·∫øu ƒëi·ªán.
D·ªØ li·ªáu ph·∫£i ch√≠nh x√°c, c·∫≠p nh·∫≠t, tu√¢n th·ªß quy chu·∫©n k·ªπ thu·∫≠t.
Kinh ph√≠ t·ª´ ng√¢n s√°ch v√† ngu·ªìn h·ª£p ph√°p kh√°c.

3. **N·ªôi dung ƒëi·ªÅu tra ch√≠nh**\n
ƒêi·ªán m·∫∑t tr·ªùi: ƒëo b·ª©c x·∫°, s·ªë gi·ªù n·∫Øng, ∆∞u ti√™n n∆°i b·ª©c x·∫° > 4 kWh/m¬≤/ng√†y.
ƒêi·ªán gi√≥: kh·∫£o s√°t t·ªëc ƒë·ªô, h∆∞·ªõng gi√≥, t·∫≠p trung ·ªü ven bi·ªÉn, cao nguy√™n.
ƒê·ªãa nhi·ªát: nghi√™n c·ª©u m·∫°ch n∆∞·ªõc n√≥ng, ƒë·ª©t g√£y ƒë·ªãa ch·∫•t.
S√≥ng bi·ªÉn: ƒëo chi·ªÅu cao, chu k·ª≥, m·∫≠t ƒë·ªô nƒÉng l∆∞·ª£ng s√≥ng.
Th·ªßy tri·ªÅu: ƒëo m·ª±c n∆∞·ªõc, bi√™n ƒë·ªô tri·ªÅu, ∆∞u ti√™n c·ª≠a s√¥ng, v·ªãnh l·ªõn.
Ch·∫•t th·∫£i r·∫Øn: th·ªëng k√™ kh·ªëi l∆∞·ª£ng, th√†nh ph·∫ßn, ∆∞u ti√™n ƒë√¥ th·ªã l·ªõn > 500 t·∫•n/ng√†y.
Sinh kh·ªëi: kh·∫£o s√°t ph·ª• ph·∫©m n√¥ng nghi·ªáp, chƒÉn nu√¥i, ch·∫ø bi·∫øn.
Th·ªßy ƒëi·ªán: ƒëi·ªÅu tra th·ªßy vƒÉn, s√¥ng su·ªëi, h·ªì ch·ª©a.

4. **K·∫øt qu·∫£ ƒëi·ªÅu tra**\n
B√°o c√°o t·ªïng h·ª£p.
B·∫£n ƒë·ªì ph√¢n b·ªë ti·ªÅm nƒÉng.
B·ªô d·ªØ li·ªáu gi·∫•y v√† s·ªë h√≥a, l∆∞u tr·ªØ t·∫°i B·ªô T√†i nguy√™n v√† M√¥i tr∆∞·ªùng.

5. **T·ªï ch·ª©c th·ª±c hi·ªán**\n
B·ªô, ng√†nh, ƒë·ªãa ph∆∞∆°ng, t·ªï ch·ª©c, c√° nh√¢n li√™n quan c√≥ tr√°ch nhi·ªám tri·ªÉn khai.
V∆∞·ªõng m·∫Øc b√°o c√°o B·ªô TN&MT ƒë·ªÉ x·ª≠ l√Ω.

Th√¥ng t∆∞ 2025/TT-BTNMT quy ƒë·ªãnh chi ti·∫øt ph·∫°m vi ƒëi·ªÅu tra c∆° b·∫£n v·ªÅ t√†i nguy√™n ƒëi·ªán nƒÉng l∆∞·ª£ng t√°i t·∫°o v√† nƒÉng l∆∞·ª£ng m·ªõi (m·∫∑t tr·ªùi, gi√≥, ƒë·ªãa nhi·ªát, s√≥ng bi·ªÉn, th·ªßy tri·ªÅu, ch·∫•t th·∫£i, sinh kh·ªëi, th·ªßy ƒëi·ªán). ƒêi·ªÅu tra nh·∫±m ph·ª•c v·ª• quy ho·∫°ch ƒëi·ªán l·ª±c, an ninh nƒÉng l∆∞·ª£ng, ph√°t tri·ªÉn b·ªÅn v·ªØng, v·ªõi k·∫øt qu·∫£ l√† b√°o c√°o, b·∫£n ƒë·ªì ph√¢n b·ªë ti·ªÅm nƒÉng v√† c∆° s·ªü d·ªØ li·ªáu qu·ªëc gia.
                """
                st.rerun()
        with col3:
            if st.button("üìå example 3", use_container_width=True):
                st.session_state.pdf_url = "https://vbpl.vn/FileData/TW/Lists/vbpq/Attachments/177810/VanBanGoc_03-bnnmt.pdf"
                # Set sample summary for example 3
                st.session_state.pdf_summary = """
**T√ìM T·∫ÆT VƒÇN B·∫¢N**\n
T√™n vƒÉn b·∫£n: Th√¥ng t∆∞ s·ªë ‚Ä¶/2025/TT-BNNMT s·ª≠a ƒë·ªïi, b·ªï sung Th√¥ng t∆∞ s·ªë 25/2024/TT-BNNPTNT ng√†y 16/12/2024.
C∆° quan ban h√†nh: B·ªô N√¥ng nghi·ªáp v√† M√¥i tr∆∞·ªùng.
Ng∆∞·ªùi k√Ω: Th·ª© tr∆∞·ªüng Ho√†ng Trung.
Hi·ªáu l·ª±c: NƒÉm 2025 (ng√†y c·ª• th·ªÉ s·∫Ω ghi trong vƒÉn b·∫£n ch√≠nh th·ª©c).

1. **N·ªôi dung s·ª≠a ƒë·ªïi, b·ªï sung**\n
ƒêi·ªÅu ch·ªânh th√¥ng tin v·ªÅ t√™n th∆∞∆°ng ph·∫©m v√† t·ªï ch·ª©c, c√° nh√¢n ƒëƒÉng k√Ω:
39 ho·∫°t ch·∫•t, 44 t√™n th∆∞∆°ng ph·∫©m thay ƒë·ªïi th√¥ng tin t·ªï ch·ª©c/c√° nh√¢n ƒëƒÉng k√Ω.
01 ho·∫°t ch·∫•t, 01 t√™n th∆∞∆°ng ph·∫©m thay ƒë·ªïi t√™n th∆∞∆°ng ph·∫©m.
B·ªï sung danh m·ª•c thu·ªëc b·∫£o v·ªá th·ª±c v·∫≠t ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng t·∫°i Vi·ªát Nam:
Thu·ªëc tr·ª´ s√¢u: 132 ho·∫°t ch·∫•t, 189 t√™n th∆∞∆°ng ph·∫©m.
Thu·ªëc tr·ª´ b·ªánh: 112 ho·∫°t ch·∫•t, 136 t√™n th∆∞∆°ng ph·∫©m.
Thu·ªëc tr·ª´ c·ªè: 32 ho·∫°t ch·∫•t, 60 t√™n th∆∞∆°ng ph·∫©m.
Thu·ªëc ƒëi·ªÅu h√≤a sinh tr∆∞·ªüng: 05 ho·∫°t ch·∫•t, 07 t√™n th∆∞∆°ng ph·∫©m.
Thu·ªëc tr·ª´ chu·ªôt: 05 ho·∫°t ch·∫•t, 07 t√™n th∆∞∆°ng ph·∫©m.
Thu·ªëc tr·ª´ ·ªëc: 01 ho·∫°t ch·∫•t, 02 t√™n th∆∞∆°ng ph·∫©m.
Thu·ªëc tr·ª´ m·ªëi: 03 ho·∫°t ch·∫•t, 03 t√™n th∆∞∆°ng ph·∫©m.
Thu·ªëc kh·ª≠ tr√πng kho: 01 ho·∫°t ch·∫•t, 01 t√™n th∆∞∆°ng ph·∫©m.
Thu·ªëc b·∫£o qu·∫£n n√¥ng s·∫£n: 01 ho·∫°t ch·∫•t, 01 t√™n th∆∞∆°ng ph·∫©m.
M√£ s·ªë HS c·ªßa c√°c lo·∫°i thu·ªëc tr√™n ƒë∆∞·ª£c th·ª±c hi·ªán theo Ph·ª• l·ª•c I c·ªßa Th√¥ng t∆∞ 01/2024/TT-BNNPTNT.

2. **Hi·ªáu l·ª±c v√† thi h√†nh**
Th√¥ng t∆∞ c√≥ hi·ªáu l·ª±c t·ª´ nƒÉm 2025.
C·ª•c Tr·ªìng tr·ªçt v√† B·∫£o v·ªá th·ª±c v·∫≠t, c√°c ƒë∆°n v·ªã thu·ªôc B·ªô, S·ªü N√¥ng nghi·ªáp v√† M√¥i tr∆∞·ªùng c√°c t·ªânh/th√†nh ph·ªë, c√πng t·ªï ch·ª©c/c√° nh√¢n li√™n quan c√≥ tr√°ch nhi·ªám thi h√†nh.
N·∫øu c√≥ kh√≥ khƒÉn, v∆∞·ªõng m·∫Øc th√¨ ph·∫£n √°nh v·ªÅ B·ªô N√¥ng nghi·ªáp v√† M√¥i tr∆∞·ªùng ƒë·ªÉ gi·∫£i quy·∫øt.

Th√¥ng t∆∞ 2025/TT-BNNMT s·ª≠a ƒë·ªïi, b·ªï sung Danh m·ª•c thu·ªëc b·∫£o v·ªá th·ª±c v·∫≠t theo Th√¥ng t∆∞ 25/2024, g·ªìm ƒëi·ªÅu ch·ªânh th√¥ng tin 40 th∆∞∆°ng ph·∫©m/ho·∫°t ch·∫•t, b·ªï sung g·∫ßn 300 ho·∫°t ch·∫•t v·ªõi h∆°n 400 t√™n th∆∞∆°ng ph·∫©m m·ªõi ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng, ƒë·ªìng th·ªùi quy ƒë·ªãnh √°p d·ª•ng m√£ s·ªë HS th·ªëng nh·∫•t.
                """
                st.rerun()
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col_viewer:
        if pdf_url:
            st.markdown('<div class="floating-card">', unsafe_allow_html=True)
            st.markdown('<h2 class="section-header">üìñ PDF Viewer</h2>', unsafe_allow_html=True)
            
            try:
                with st.spinner("üìÑ Loading PDF..."):
                    pdf_data = requests.get(pdf_url, timeout=30).content
                    base64_pdf = base64.b64encode(pdf_data).decode('utf-8')
                    
                # Simple PDF viewer
                st.markdown(
                    f"""
                    <div style="border: 1px solid #dee2e6; border-radius: 8px; overflow: hidden;">
                        <iframe src="data:application/pdf;base64,{base64_pdf}" 
                               width="100%" 
                               height="800" 
                               type="application/pdf"
                               style="border: none;">
                        </iframe>
                    </div>
                    """,
                    unsafe_allow_html=True
                )
            except:
                st.error("‚ùå Unable to load PDF. Please check the URL and try again.")
            
            st.markdown('</div>', unsafe_allow_html=True)
        else:
            # Placeholder when no PDF is loaded
            st.markdown(
                """
                <div class="floating-card" style="text-align: center; padding: 4rem;">
                    <div style="font-size: 4rem; margin-bottom: 1rem;">üìÑ</div>
                    <h3 style="color: #666; margin-bottom: 1rem;">No PDF Selected</h3>
                    <p style="color: #999;">Enter a PDF URL to view the document here</p>
                </div>
                """,
                unsafe_allow_html=True
            )


############################## phan loai



elif function_choice == "üè∑Ô∏è Document Classification":
    st.markdown('<h3>üè∑Ô∏è Document Classification</h3>', unsafe_allow_html=True)
    col_input, col_viewer = st.columns([1, 2], gap="large")
    with col_input:
        st.markdown('<hr>', unsafe_allow_html=True)
        st.markdown('<h4>üìù Document Information</h4>', unsafe_allow_html=True)
        classification_summary = st.text_area(
            "Document Summary:",
            height=120,
            value=st.session_state.classification_summary,
            placeholder="Enter document summary here..."
        )
        agency = st.text_input(
            "Issuing Agency:",
            value=st.session_state.agency,
            placeholder="Enter the issuing agency..."
        )
        st.session_state.classification_summary = classification_summary
        st.session_state.agency = agency
        if st.button("üîç Classify Document", type="primary", use_container_width=True):
            if not classification_summary or not agency:
                st.warning("‚ö†Ô∏è Please fill in both Summary and Agency fields")
            elif len(classification_summary) < 5 or len(agency) < 5:
                st.warning("‚ö†Ô∏è Text too short. Please enter at least 5 characters for Summary and Agency")
            else:
                with st.spinner("üîç Classifying document..."):
                    try:
                        response = requests.post(
                            "http://1.53.58.232:8888/classify",
                            json={"summary": classification_summary, "issuing_agency": agency},
                            timeout=30
                        )
                        if response.status_code == 200:
                            result = response.json()
                            st.success("‚úÖ Classification complete!")
                            st.markdown('<h4>üìã Classification Results</h4>', unsafe_allow_html=True)
                            col_label, col_other = st.columns([1, 1])
                            with col_label:
                                # Use actual_label from session_state if available, otherwise from API response
                                if hasattr(st.session_state, 'actual_label') and st.session_state.actual_label:
                                    actual_label = st.session_state.actual_label
                                else:
                                    actual_label = result.get("label", ["Not provided in response"]) if isinstance(result, dict) else ["Not provided"]
                                
                                if not isinstance(actual_label, list):
                                    actual_label = [actual_label]
                                
                                st.markdown(
                                    """
                                    <div style='background-color: #f0f2f6; padding: 10px; border-radius: 5px; margin-bottom: 10px;'>
                                        <strong>Actual Label:</strong>
                                    </div>
                                    """,
                                    unsafe_allow_html=True
                                )
                                for label in actual_label:
                                    st.markdown(
                                        f"""
                                        <div style='background-color: #e6e8ed; padding: 8px; border-radius: 5px; margin-bottom: 5px;'>
                                            {label}
                                        </div>
                                        """,
                                        unsafe_allow_html=True
                                    )
                            with col_other:
                                # Get predicted labels from API response
                                predicted_labels = []
                                if isinstance(result, dict):
                                    for key, value in result.items():
                                        if isinstance(value, list):
                                            predicted_labels.extend(value)
                                        elif isinstance(value, dict):
                                            for sub_key, sub_value in value.items():
                                                if isinstance(sub_value, list):
                                                    predicted_labels.extend(sub_value)
                                                else:
                                                    predicted_labels.append(str(sub_value))
                                        else:
                                            predicted_labels.append(str(value))
                                else:
                                    predicted_labels.append(str(result))
                                
                                st.markdown(
                                    """
                                    <div style='background-color: #f0f2f6; padding: 10px; border-radius: 5px; margin-bottom: 10px;'>
                                        <strong>Predicted Labels:</strong>
                                    </div>
                                    """,
                                    unsafe_allow_html=True
                                )
                                
                                # Display predicted labels with highlighting
                                if isinstance(result, dict):
                                    for key, value in result.items():
                                        if key != "label":
                                            if isinstance(value, list):
                                                for item in value:
                                                    # Check if this predicted label matches any actual label
                                                    is_correct = str(item) in [str(al) for al in actual_label] if hasattr(st.session_state, 'actual_label') and st.session_state.actual_label else False
                                                    bg_color = "#d4edda" if is_correct else "#f8d7da"  # Green for correct, red for incorrect
                                                    border_color = "#c3e6cb" if is_correct else "#f5c6cb"
                                                    st.markdown(
                                                        f"""
                                                        <div style='background-color: {bg_color}; border: 1px solid {border_color}; padding: 8px; border-radius: 5px; margin-bottom: 5px;'>
                                                            {item} {'‚úÖ' if is_correct else '‚ùå'}
                                                        </div>
                                                        """,
                                                        unsafe_allow_html=True
                                                    )
                                            elif isinstance(value, dict):
                                                for sub_key, sub_value in value.items():
                                                    is_correct = str(sub_value) in [str(al) for al in actual_label] if hasattr(st.session_state, 'actual_label') and st.session_state.actual_label else False
                                                    bg_color = "#d4edda" if is_correct else "#f8d7da"
                                                    border_color = "#c3e6cb" if is_correct else "#f5c6cb"
                                                    st.markdown(
                                                        f"""
                                                        <div style='background-color: {bg_color}; border: 1px solid {border_color}; padding: 8px; border-radius: 5px; margin-bottom: 5px;'>
                                                            <strong>{sub_key}:</strong> {sub_value} {'‚úÖ' if is_correct else '‚ùå'}
                                                        </div>
                                                        """,
                                                        unsafe_allow_html=True
                                                    )
                                            else:
                                                is_correct = str(value) in [str(al) for al in actual_label] if hasattr(st.session_state, 'actual_label') and st.session_state.actual_label else False
                                                bg_color = "#d4edda" if is_correct else "#f8d7da"
                                                border_color = "#c3e6cb" if is_correct else "#f5c6cb"
                                                st.markdown(
                                                    f"""
                                                    <div style='background-color: {bg_color}; border: 1px solid {border_color}; padding: 8px; border-radius: 5px; margin-bottom: 5px;'>
                                                        {value} {'‚úÖ' if is_correct else '‚ùå'}
                                                    </div>
                                                    """,
                                                    unsafe_allow_html=True
                                                )
                                else:
                                    is_correct = str(result) in [str(al) for al in actual_label] if hasattr(st.session_state, 'actual_label') and st.session_state.actual_label else False
                                    bg_color = "#d4edda" if is_correct else "#f8d7da"
                                    border_color = "#c3e6cb" if is_correct else "#f5c6cb"
                                    st.markdown(
                                        f"""
                                        <div style='background-color: {bg_color}; border: 1px solid {border_color}; padding: 8px; border-radius: 5px; margin-bottom: 5px;'>
                                            {result} {'‚úÖ' if is_correct else '‚ùå'}
                                        </div>
                                        """,
                                        unsafe_allow_html=True
                                    )
                        else:
                            st.error(f"‚ùå Error: {response.status_code}")
                    except Exception as e:
                        st.error(f"‚ùå Error: {str(e)}")

        st.markdown('<h4>üìå Examples</h4>', unsafe_allow_html=True)
        col1, col2 = st.columns(2)

        # Example 2: Agriculture Strategy
        with col1:
            if st.button("Exemple 1", use_container_width=True):
                st.session_state.classification_summary = "Ph√™ duy·ªát Chi·∫øn l∆∞·ª£c ph√°t tri·ªÉn tr·ªìng tr·ªçt ƒë·∫øn nƒÉm 2030, t·∫ßm nh√¨n ƒë·∫øn nƒÉm 2050"
                st.session_state.agency = "Th·ªß t∆∞·ªõng Ch√≠nh ph·ªß"
                st.session_state.example_pdf_url = "https://datafiles.chinhphu.vn/cpp/files/vbpq/2024/01/1748-ttg.signed.pdf"
                st.session_state.actual_label = [s.lower() for s in[
                    "V·ª• M√¥i tr∆∞·ªùng", "T·ªïng c·ª•c Kh√≠ t∆∞·ª£ng Thu·ª∑ vƒÉn", "C·ª•c B·∫£o t·ªìn thi√™n nhi√™n v√† ƒêa d·∫°ng sinh h·ªçc",
                    "C·ª•c Ki·ªÉm so√°t √¥ nhi·ªÖm m√¥i tr∆∞·ªùng", "C·ª•c Bi·∫øn ƒë·ªïi kh√≠ h·∫≠u", "C·ª•c Qu·∫£n l√Ω T√†i nguy√™n n∆∞·ªõc",
                    "C·ª•c Vi·ªÖn th√°m Qu·ªëc gia", "V·ª• Ph√°p ch·∫ø", "V·ª• T·ªï ch·ª©c c√°n b·ªô", "C·ª•c ƒêo ƒë·∫°c, B·∫£n ƒë·ªì v√† Th√¥ng tin ƒë·ªãa l√Ω Vi·ªát Nam",
                    "V·ª• ƒê·∫•t ƒëai", "C·ª•c Bi·ªÉn v√† H·∫£i ƒë·∫£o Vi·ªát Nam", "C·ª•c ƒêƒÉng k√Ω v√† D·ªØ li·ªáu th√¥ng tin ƒë·∫•t ƒëai",
                    "C·ª•c Quy ho·∫°ch v√† Ph√°t tri·ªÉn t√†i nguy√™n ƒë·∫•t", "Vi·ªán Khoa h·ªçc m√¥i tr∆∞·ªùng, bi·ªÉn v√† h·∫£i ƒë·∫£o", "V·ª• K·∫ø ho·∫°ch - T√†i ch√≠nh"
                ]]
                st.rerun()

        # Example 3: Overseas Vietnamese Committee
        with col2:
            if st.button("Exemple 2", use_container_width=True):
                st.session_state.classification_summary = "Quy·∫øt ƒë·ªãnh Quy ƒë·ªãnh ch·ª©c nƒÉng, nhi·ªám v·ª•, quy·ªÅn h·∫°n v√† c∆° c·∫•u t·ªï ch·ª©c c·ªßa ·ª¶y ban Nh√† n∆∞·ªõc v·ªÅ ng∆∞·ªùi Vi·ªát Nam ·ªü n∆∞·ªõc ngo√†i tr·ª±c thu·ªôc B·ªô Ngo·∫°i giao"
                st.session_state.agency = "Th·ªß t∆∞·ªõng Ch√≠nh ph·ªß"
                st.session_state.example_pdf_url = "https://datafiles.chinhphu.vn/cpp/files/vbpq/2023/12/30-qdttg.signed.pdf"
                st.session_state.actual_label = [s.lower() for s in[
                    "V·ª• ƒê·∫•t ƒëai", "C·ª•c Bi·ªÉn v√† H·∫£i ƒë·∫£o Vi·ªát Nam", "C·ª•c ƒêƒÉng k√Ω v√† D·ªØ li·ªáu th√¥ng tin ƒë·∫•t ƒëai",
                    "C·ª•c Quy ho·∫°ch v√† Ph√°t tri·ªÉn t√†i nguy√™n ƒë·∫•t", "Vi·ªán Khoa h·ªçc m√¥i tr∆∞·ªùng, bi·ªÉn v√† h·∫£i ƒë·∫£o",
                    "V·ª• K·∫ø ho·∫°ch - T√†i ch√≠nh", "V·ª• Ph√°p ch·∫ø", "V·ª• T·ªï ch·ª©c c√°n b·ªô", "Thanh tra B·ªô",
                    "C·ª•c ƒêo ƒë·∫°c, B·∫£n ƒë·ªì v√† Th√¥ng tin ƒë·ªãa l√Ω Vi·ªát Nam", "Vi·ªán Khoa h·ªçc ƒêo ƒë·∫°c v√† B·∫£n ƒë·ªì",
                    "Tr∆∞·ªùng ƒê√†o t·∫°o, b·ªìi d∆∞·ª°ng c√°n b·ªô t√†i nguy√™n v√† m√¥i tr∆∞·ªùng", "V·ª• H·ª£p t√°c qu·ªëc t·∫ø",
                    "V·ª• Khoa h·ªçc v√† C√¥ng ngh·ªá", "V·ª• M√¥i tr∆∞·ªùng", "C·ª•c B·∫£o t·ªìn thi√™n nhi√™n v√† ƒêa d·∫°ng sinh h·ªçc",
                    "C·ª•c Ki·ªÉm so√°t √¥ nhi·ªÖm m√¥i tr∆∞·ªùng", "Vi·ªán Chi·∫øn l∆∞·ª£c, Ch√≠nh s√°ch T√†i nguy√™n v√† M√¥i tr∆∞·ªùng",
                    "Tr∆∞·ªùng ƒê·∫°i h·ªçc T√†i nguy√™n v√† M√¥i tr∆∞·ªùng H√† N·ªôi", "Tr∆∞·ªùng ƒê·∫°i h·ªçc T√†i nguy√™n v√† M√¥i tr∆∞·ªùng TP. HCM",
                    "Qu·ªπ B·∫£o v·ªá m√¥i tr∆∞·ªùng Vi·ªát Nam"
                ]]
                st.rerun()

        st.markdown('<hr>', unsafe_allow_html=True)

    with col_viewer:
        if "example_pdf_url" not in st.session_state:
            st.session_state.example_pdf_url = ""
        if st.session_state.example_pdf_url:
            st.markdown('<hr>', unsafe_allow_html=True)
            st.markdown('<h4>üìñ PDF Viewer</h4>', unsafe_allow_html=True)
            with st.spinner("üìÑ Loading PDF..."):
                pdf_data = requests.get(st.session_state.example_pdf_url, timeout=30).content
                base64_pdf = base64.b64encode(pdf_data).decode('utf-8')
                st.markdown(
                    f"""
                    <embed src="data:application/pdf;base64,{base64_pdf}" width="100%" height="800px" type="application/pdf">
                    """,
                    unsafe_allow_html=True
                )
            st.markdown('<hr>', unsafe_allow_html=True)
        else:
            st.markdown(
                """
                <div style='text-align: center;'>
                    <h4>üìÑ No PDF Selected</h4>
                    <p>Select an example to view the document here</p>
                </div>
                """,
                unsafe_allow_html=True
            )



##################################### chatbot

elif function_choice == "üí¨ Q&A Chatbot":
    # Session state initialization
    st.session_state.setdefault("messages", [])
    st.session_state.setdefault("selected_question", None)

    # Questions data with complete answers
    QUESTIONS = [
        {
            "icon": "üå±", 
            "title": "TƒÉng c∆∞·ªùng ki·ªÉm tra, gi√°m s√°t m√¥i tr∆∞·ªùng v√† ·ª©ng d·ª•ng c√¥ng ngh·ªá x·ª≠ l√Ω r√°c", 
            "text": "Quick Question 1",
            "question": "C·ª≠ tri ƒë·ªÅ ngh·ªã B·ªô T√†i nguy√™n v√† M√¥i tr∆∞·ªùng ch·ªâ ƒë·∫°o tƒÉng c∆∞·ªùng ki·ªÉm tra, gi√°m s√°t ch·∫∑t ch·∫Ω v·ªÅ m√¥i tr∆∞·ªùng l√†ng ngh·ªÅ, doanh nghi·ªáp x·∫£ th·∫£i l·ªõn tr√™n to√†n qu·ªëc v√† c√≥ chi·∫øn l∆∞·ª£c nghi√™n c·ª©u ·ª©ng d·ª•ng khoa h·ªçc c√¥ng ngh·ªá x·ª≠ l√Ω r√°c th·∫£i ƒë·∫£m b·∫£o m√¥i tr∆∞·ªùng ƒë·ªÉ c√°c ƒë·ªãa ph∆∞∆°ng ƒë∆∞a v√†o √°p d·ª•ng x·ª≠ l√Ω t·∫°i ch·ªó ƒë·∫°t y√™u c·∫ßu",
            "answer": """Vi·ªác tƒÉng c∆∞·ªùng ki·ªÉm tra, gi√°m s√°t ch·∫∑t ch·∫Ω v·ªÅ m√¥i tr∆∞·ªùng ƒë·ªëi v·ªõi c√°c doanh nghi·ªáp x·∫£ th·∫£i l·ªõn, l√†ng ngh·ªÅ l√† tr√°ch nhi·ªám kh√¥ng ch·ªâ c·ªßa B·ªô T√†i nguy√™n v√† M√¥i tr∆∞·ªùng m√† c√≤n c·ªßa c√°c ƒë·ªãa ph∆∞∆°ng, ƒë√£ ƒë∆∞·ª£c quy ƒë·ªãnh c·ª• th·ªÉ trong c√°c vƒÉn b·∫£n quy ph·∫°m ph√°p lu·∫≠t, vƒÉn b·∫£n ch·ªâ ƒë·∫°o nh∆∞ Ngh·ªã ƒë·ªãnh s·ªë 19/2015/Nƒê-CP ng√†y 14/02/2015 c·ªßa Ch√≠nh ph·ªß quy ƒë·ªãnh chi ti·∫øt thi h√†nh m·ªôt s·ªë ƒêi·ªÅu c·ªßa Lu·∫≠t b·∫£o v·ªá m√¥i tr∆∞·ªùng, Ch·ªâ th·ªã s·ªë 25/CT-TTg ng√†y 31/8/2016 c·ªßa Th·ªß t∆∞·ªõng Ch√≠nh ph·ªß v·ªÅ m·ªôt s·ªë nhi·ªám v·ª•, gi·∫£i ph√°p c·∫•p b√°ch v·ªÅ b·∫£o v·ªá m√¥i tr∆∞·ªùng. Hi·ªán nay, B·ªô T√†i nguy√™n v√† M√¥i tr∆∞·ªùng ƒë√£ x√¢y d·ª±ng ƒê·ªÅ √°n ki·ªÉm so√°t ƒë·∫∑c bi·ªát ƒë·ªëi v·ªõi c√°c ngu·ªìn th·∫£i l·ªõn ƒë√£ ƒë∆∞·ª£c Th·ªß t∆∞·ªõng Ch√≠nh ph·ªß ph√™ duy·ªát v√† s·∫Ω t·ªï ch·ª©c th·ª±c hi·ªán trong nƒÉm 2018 v√† c√°c nƒÉm ti·∫øp theo. ƒê·ªëi v·ªõi ki·∫øn ngh·ªã v·ªÅ chi·∫øn l∆∞·ª£c nghi√™n c·ª©u ·ª©ng d·ª•ng khoa h·ªçc c√¥ng ngh·ªá x·ª≠ l√Ω r√°c th·∫£i ƒë·∫£m b·∫£o m√¥i tr∆∞·ªùng ƒë·ªÉ c√°c ƒë·ªãa ph∆∞∆°ng ƒë∆∞a v√†o √°p d·ª•ng x·ª≠ l√Ω t·∫°i ch·ªó ƒë·∫°t y√™u c·∫ßu: v·ªÅ c∆° b·∫£n hi·ªán nay ·ªü Vi·ªát Nam ƒë√£ c√≥ ƒë·∫ßy ƒë·ªß c√°c c√¥ng ngh·ªá ƒë·ªÉ x·ª≠ l√Ω m·ªçi lo·∫°i ch·∫•t th·∫£i ƒë·∫∑c th√π ph√°t sinh t·ª´ c√°c ho·∫°t ƒë·ªông s·∫£n xu·∫•t, kinh doanh, d·ªãch v·ª• c≈©ng nh∆∞ c√°c lo·∫°i ch·∫•t th·∫£i sinh ho·∫°t. V·ªõi vai tr√≤ qu·∫£n l√Ω nh√† n∆∞·ªõc v·ªÅ b·∫£o v·ªá m√¥i tr∆∞·ªùng, B·ªô T√†i nguy√™n v√† M√¥i tr∆∞·ªùng c≈©ng ƒë√£ ban h√†nh Quy chu·∫©n k·ªπ thu·∫≠t qu·ªëc gia v·ªÅ l√≤ ƒë·ªët ch·∫•t th·∫£i r·∫Øn sinh ho·∫°t (QCVN 61-MT:2016/BTNMT). Theo quy ƒë·ªãnh t·∫°i Kho·∫£n i M·ª•c 6 ƒêi·ªÅu 2 Ngh·ªã ƒë·ªãnh s·ªë 20/2013/Nƒê-CP ng√†y 26/2/2014 c·ªßa Ch√≠nh ph·ªß quy ƒë·ªãnh ch·ª©c nƒÉng, nhi·ªám v·ª•, quy·ªÅn h·∫°n v√† c∆° c·∫•u t·ªï ch·ª©c c·ªßa B·ªô Khoa h·ªçc v√† C√¥ng ngh·ªá; Kho·∫£n 3 ƒêi·ªÅu 27 Ngh·ªã ƒë·ªãnh s·ªë 38/2015/Nƒê-CP ng√†y 24/4/2015 c·ªßa Ch√≠nh ph·ªß v·ªÅ qu·∫£n l√Ω ch·∫•t th·∫£i v√† ph·∫ø li·ªáu, hi·ªán nay B·ªô Khoa h·ªçc v√† C√¥ng ngh·ªá l√† c∆° quan ƒë∆∞·ª£c giao ch·ªß tr√¨ h∆∞·ªõng d·∫´n vi·ªác ƒë√°nh gi√°, th·∫©m ƒë·ªãnh c√¥ng ngh·ªá n√≥i chung, th·∫©m ƒë·ªãnh c√¥ng ngh·ªá x·ª≠ l√Ω ch·∫•t th·∫£i r·∫Øn sinh ho·∫°t m·ªõi ƒë∆∞·ª£c nghi√™n c·ª©u v√† √°p d·ª•ng l·∫ßn ƒë·∫ßu ·ªü Vi·ªát Nam v√† ƒë·ªÅ xu·∫•t c√¥ng ngh·ªá x·ª≠ l√Ω ch·∫•t th·∫£i r·∫Øn ti√™n ti·∫øn, hi·ªáu qu·∫£ ƒë·ªÉ tri·ªÉn khai √°p d·ª•ng n√≥i ri√™ng. Ngo√†i ra, t·∫°i Quy·∫øt ƒë·ªãnh s·ªë 798/Qƒê-TTg ng√†y 25/5/2011 c·ªßa Th·ªß t∆∞·ªõng Ch√≠nh ph·ªß ph√™ duy·ªát Ch∆∞∆°ng tr√¨nh ƒë·∫ßu t∆∞ x·ª≠ l√Ω ch·∫•t th·∫£i r·∫Øn giai ƒëo·∫°n 2011 - 2020 trong ƒë√≥ giao B·ªô Khoa h·ªçc v√† C√¥ng ngh·ªá r√† so√°t, ƒë√°nh gi√°, t·ªï ch·ª©c nghi√™n c·ª©u, ƒë·ªÅ xu·∫•t c√¥ng ngh·ªá x·ª≠ l√Ω ch·∫•t th·∫£i r·∫Øn ti√™n ti·∫øn, hi·ªáu qu·∫£ ƒë·ªÉ tri·ªÉn khai √°p d·ª•ng."""
        },
        {
            "icon": "üè°", 
            "title": "X·ª≠ l√Ω r√°c th·∫£i n√¥ng th√¥n, h·ªó tr·ª£ ƒë·ªãa ph∆∞∆°ng v√† tƒÉng ch·∫ø t√†i x·ª≠ ph·∫°t", 
            "text": "Quick Question 2",
            "question": "T√¨nh tr·∫°ng r√°c th·∫£i ·ªü n√¥ng th√¥n r·∫•t l·ªõn, kh√¥ng c√≤n n∆°i ch√¥n l·∫•p, kh√¥ng c√≥ kinh ph√≠ ƒë·ªÉ ƒë·∫ßu t∆∞ c√¥ng ngh·ªá ƒë·ªët, x·ª≠ l√Ω r√°c th·∫£i, g√¢y √¥ nhi·ªÖm m√¥i tr∆∞·ªùng, ·∫£nh h∆∞·ªüng ƒë·∫øn s·ª©c kh·ªèe c·ªßa nh√¢n d√¢n. ƒê·ªÅ ngh·ªã Ch√≠nh ph·ªß c√≥ ph∆∞∆°ng √°n x·ª≠ l√Ω, kh·∫Øc ph·ª•c, th·ª±c hi·ªán nghi√™m t√∫c quy tr√¨nh x·ª≠ l√Ω r√°c th·∫£i; c√≥ c∆° ch·∫ø, ch√≠nh s√°ch h·ªó tr·ª£ c√°c ƒë·ªãa ph∆∞∆°ng trong vi·ªác x·ª≠ l√Ω r√°c th·∫£i; ƒë·ªìng th·ªùi, ban h√†nh ch·∫ø t√†i x·ª≠ ph·∫°t vi ph·∫°m, √¥ nhi·ªÖm m√¥i tr∆∞·ªùng v·ªõi xu h∆∞·ªõng nghi√™m kh·∫Øc h∆°n, c√≥ t√≠nh rƒÉn ƒëe cao ƒë·ªÉ ngƒÉn ng·ª´a c√°c h√†nh vi vi ph·∫°m ph√°p lu·∫≠t m√¥i tr∆∞·ªùng t√°i di·ªÖn.",
            "answer": "Ch√≠nh ph·ªß ƒë√£ ban h√†nh Ngh·ªã ƒë·ªãnh s·ªë 38/2015/Nƒê-CP ng√†y 24/4/2015 v·ªÅ qu·∫£n l√Ω ch·∫•t th·∫£i v√† ph·∫ø li·ªáu; B·ªô T√†i nguy√™n v√† M√¥i tr∆∞·ªùng ƒë√£ ban h√†nh Quy chu·∫©n k·ªπ thu·∫≠t qu·ªëc gia v·ªÅ n∆∞·ªõc th·∫£i b√£i ch√¥n l·∫•p ch·∫•t th·∫£i r·∫Øn (QCVN 25 :2009/BTNMT); Quy chu·∫©n k·ªπ thu·∫≠t qu·ªëc gia v·ªÅ l√≤ ƒë·ªët ch·∫•t th·∫£i r·∫Øn sinh ho·∫°t (QCVN 61-MT: 2016/BTNMT);... B√™n c·∫°nh ƒë√≥, B·ªô T√†i nguy√™n v√† M√¥i tr∆∞·ªùng tham m∆∞u, tr√¨nh Ch√≠nh ph·ªß ban h√†nh nhi·ªÅu c∆° ch·∫ø, ch√≠nh s√°ch nh·∫±m khuy·∫øn kh√≠ch, ∆∞u ƒë√£i, h·ªó tr·ª£ d·ª± √°n ƒë·∫ßu t∆∞ x·ª≠ l√Ω ch·∫•t th·∫£i r·∫Øn, c·ª• th·ªÉ: - Ngh·ªã ƒë·ªãnh s·ªë 19/2015/Nƒê-CP ng√†y 14/02/2015 c·ªßa Ch√≠nh ph·ªß quy ƒë·ªãnh chi ti·∫øt thi h√†nh m·ªôt s·ªë ƒëi·ªÅu c·ªßa Lu·∫≠t b·∫£o v·ªá m√¥i tr∆∞·ªùng ƒë√£ quy ƒë·ªãnh c√°c ch√≠nh s√°ch h·ªó tr·ª£ kinh ph√≠ cho ho·∫°t ƒë·ªông x·ª≠ l√Ω ch·∫•t th·∫£i r·∫Øn (h·ªó tr·ª£ v·ªÅ ƒë·∫ßu t∆∞ x√¢y d·ª±ng c√°c c√¥ng tr√¨nh h·∫° t·∫ßng; ∆∞u ƒë√£i v·ªÅ ti·ªÅn thu√™ ƒë·∫•t; h·ªó tr·ª£ ti·ªÅn b·ªìi th∆∞·ªùng, gi·∫£i ph√≥ng m·∫∑t b·∫±ng; ∆∞u ƒë√£i v·ªÅ thu·∫ø thu nh·∫≠p doanh nghi·ªáp,‚Ä¶); - Ngh·ªã ƒë·ªãnh s·ªë 15/2015/Nƒê-CP ng√†y 14/02/2015 c·ªßa Ch√≠nh ph·ªß v·ªÅ ƒë·∫ßu t∆∞ theo h√¨nh th·ª©c ƒë·ªëi t√°c c√¥ng t∆∞ c≈©ng quy ƒë·ªãnh ƒë·ªëi v·ªõi lƒ©nh v·ª±c ƒë·∫ßu t∆∞ v√†o h·ªá th·ªëng thu gom, x·ª≠ l√Ω n∆∞·ªõc th·∫£i, ch·∫•t th·∫£i, c√°c ƒë·ªãa ph∆∞∆°ng c√≥ th√™m k√™nh thu h√∫t v·ªën ƒë·ªÉ th√°o g·ª° n√∫t th·∫Øt trong c√°c d·ª± √°n ƒë·∫ßu t∆∞ c∆° s·ªü x·ª≠ l√Ω ch·∫•t th·∫£i r·∫Øn). Song song v·ªõi c√°c gi·∫£i ph√°p v·ªÅ m·∫∑t ch√≠nh s√°ch, B·ªô T√†i nguy√™n v√† M√¥i tr∆∞·ªùng ƒë√£ tri·ªÉn khai th·ª≠ nghi·ªám m√¥ h√¨nh thu gom, v·∫≠n chuy·ªÉn v√† x·ª≠ l√Ω ch·∫•t th·∫£i r·∫Øn sinh ho·∫°t khu v·ª±c n√¥ng th√¥n; ƒë√£ t·ªï ch·ª©c c√°c ho·∫°t ƒë·ªông truy·ªÅn th√¥ng n√¢ng cao nh·∫≠n th·ª©c c·ªßa ng∆∞·ªùi d√¢n; ƒë√†o t·∫°o v√† t·ªï ch·ª©c c√°c kho√° t·∫≠p hu·∫•n cho doanh nghi·ªáp v·ªÅ s·∫£n xu·∫•t s·∫°ch h∆°n, ho·∫°t ƒë·ªông gi·∫£m thi·ªÉu ph√°t sinh ch·∫•t th·∫£i r·∫Øn; quy tr√¨nh thu gom, v·∫≠n chuy·ªÉn, x·ª≠ l√Ω, t√°i ch·∫ø ch·∫•t th·∫£i r·∫Øn theo ƒë√∫ng c√°c quy ƒë·ªãnh c·ªßa ph√°p lu·∫≠t. H√†ng nƒÉm, B·ªô T√†i nguy√™n v√† M√¥i tr∆∞·ªùng ch·ªß tr√¨, ph·ªëi h·ª£p v·ªõi UBND c·∫•p t·ªânh tr√¨nh Th·ªß t∆∞·ªõng Ch√≠nh ph·ªß ph√™ duy·ªát ngu·ªìn kinh ph√≠ h·ªó tr·ª£ t·ª´ ng√¢n s√°ch nh√† n∆∞·ªõc ƒë·ªëi v·ªõi c√°c c∆° s·ªü g√¢y √¥ nhi·ªÖm m√¥i tr∆∞·ªùng nghi√™m tr·ªçng. ·ª¶y ban nh√¢n d√¢n c·∫•p t·ªânh ƒë√£ ban h√†nh quy ho·∫°ch qu·∫£n l√Ω ch·∫•t th·∫£i r·∫Øn, quy ƒë·ªãnh c·ª• th·ªÉ v·ªÅ qu·∫£n l√Ω ch·∫•t th·∫£i r·∫Øn sinh ho·∫°t tr√™n ƒë·ªãa b√†n cho ph√π h·ª£p v·ªõi th·ª±c t·∫ø c·ªßa ƒë·ªãa ph∆∞∆°ng. T·ª∑ l·ªá thu gom, x·ª≠ l√Ω ch·∫•t th·∫£i r·∫Øn t·∫°i c√°c khu v·ª±c n√¥ng th√¥n tƒÉng d·∫ßn theo c√°c nƒÉm. - ƒê·ªëi v·ªõi ki·∫øn ngh·ªã ‚Äúban h√†nh ch·∫ø t√†i x·ª≠ ph·∫°t vi ph·∫°m, √¥ nhi·ªÖm m√¥i tr∆∞·ªùng v·ªõi xu h∆∞·ªõng nghi√™m kh·∫Øc h∆°n, c√≥ t√≠nh rƒÉn ƒëe cao ƒë·ªÉ ngƒÉn ng·ª´a c√°c h√†nh vi vi ph·∫°m ph√°p lu·∫≠t m√¥i tr∆∞·ªùng t√†i di·ªÖn‚Äù: B·ªô T√†i nguy√™n v√† M√¥i tr∆∞·ªùng ƒë√£ tham m∆∞u cho Ch√≠nh ph·ªß ban h√†nh Ngh·ªã ƒë·ªãnh s·ªë 155/2016/Nƒê-CP ng√†y 18/11/2016 v·ªÅ x·ª≠ ph·∫°t vi ph·∫°m h√†nh ch√≠nh trong lƒ©nh v·ª±c b·∫£o v·ªá m√¥i tr∆∞·ªùng. Ngh·ªã ƒë·ªãnh 155/2016/Nƒê-CP ƒë∆∞·ª£c ban h√†nh s·∫Ω t√°c ƒë·ªông m·∫°nh m·∫Ω ƒë·∫øn √Ω th·ª©c v√† nh·∫≠n th·ª©c c·ªßa c√° nh√¢n, t·ªï ch·ª©c trong c√¥ng t√°c b·∫£o v·ªá m√¥i tr∆∞·ªùng; bu·ªôc c√°c c√° nh√¢n, t·ªï ch·ª©c ph·∫£i ƒë·∫ßu t∆∞ kinh ph√≠ cho c√¥ng t√°c b·∫£o v·ªá m√¥i tr∆∞·ªùng trong qu√° tr√¨nh ho·∫°t ƒë·ªông s·∫£n xu·∫•t, kinh doanh v√† d·ªãch v·ª• tr√™n l√£nh th·ªï Vi·ªát Nam. M·ª©c ph·∫°t ti·ªÅn c·ªßa Ngh·ªã ƒë·ªãnh s·ªë 155/2016/Nƒê-CP ƒë∆∞·ª£c x√¢y d·ª±ng theo quy ƒë·ªãnh c·ªßa Lu·∫≠t X·ª≠ l√Ω vi ph·∫°m h√†nh ch√≠nh. Hi·ªán nay, m·ª©c ph·∫°t ti·ªÅn ƒë·ªëi v·ªõi h√†nh vi vi ph·∫°m h√†nh ch√≠nh v·ªÅ b·∫£o v·ªá m√¥i tr∆∞·ªùng l√† cao nh·∫•t trong c√°c lƒ©nh v·ª±c x·ª≠ l√Ω vi ph·∫°m h√†nh ch√≠nh ·ªü Vi·ªát Nam (m·ª©c ph·∫°t ti·ªÅn t·ª´ c·∫£nh c√°o ƒë·∫øn 01 t·ª∑ ƒë·ªìng ƒë·ªëi v·ªõi c√° nh√¢n v√† 02 t·ª∑ ƒë·ªìng ƒë·ªëi v·ªõi t·ªï ch·ª©c). Tr∆∞·ªõc ƒë√¢y, Ngh·ªã ƒë·ªãnh s·ªë 179/2013/Nƒê-CP ƒë√£ c√≥ t√≠nh rƒÉn ƒëe cao, tuy nhi√™n Ngh·ªã ƒë·ªãnh s·ªë 155/2016/Nƒê-CP hi·ªán nay c√≤n c√≥ t√≠nh rƒÉn ƒëe cao h∆°n ƒë·ªëi v·ªõi c√°c h√†nh vi c·ªë √Ω g√¢y √¥ nhi·ªÖm m√¥i tr∆∞·ªùng (nh∆∞ tr∆∞·ªõc ƒë√¢y h√†nh vi x·∫£ n∆∞·ªõc th·∫£i v∆∞·ª£t quy chu·∫©n cho ph√©p tr√™n 10 l·∫ßn v·ªõi l∆∞u l∆∞·ª£ng n∆∞·ªõc th·∫£i tr√™n 10.000 m3/ng√†y ƒë√™m th√¨ m·ª©c ph·∫°t ti·ªÅn l√† t·ªëi ƒëa, hi·ªán nay ch·ªâ c·∫ßn x·∫£ n∆∞·ªõc th·∫£i v∆∞·ª£t tr√™n 10 l·∫ßn v·ªõi l∆∞u l∆∞·ª£ng l·ªõn h∆°n 5.000 m3/ng√†y.ƒë√™m nh∆∞ng d∆∞·ªõi m·ª©c t·ªôi ph·∫°m m√¥i tr∆∞·ªùng theo quy ƒë·ªãnh c·ªßa B·ªô lu·∫≠t H√¨nh s·ª± th√¨ ƒë√£ b·ªã x·ª≠ ph·∫°t ·ªü m·ª©c t·ªëi ƒëa). B√™n c·∫°nh h√¨nh th·ª©c ph·∫°t ti·ªÅn, Ngh·ªã ƒë·ªãnh s·ªë 155/2016/Nƒê-CP c√≤n quy ƒë·ªãnh c√°c h√¨nh th·ª©c x·ª≠ ph·∫°t b·ªï sung (ƒë√¨nh ch·ªâ ho·∫°t ƒë·ªông, t∆∞·ªõc quy·ªÅn s·ª≠ d·ª•ng gi·∫•y ph√©p m√¥i tr∆∞·ªùng, t·ªãch thu tang v·∫≠t vi ph·∫°m), bi·ªán ph√°p kh·∫Øc ph·ª•c h·∫≠u qu·∫£ (bu·ªôc kh·∫Øc ph·ª•c l·∫°i t√¨nh trang √¥ nhi·ªÖm m√¥i tr∆∞·ªùng ƒë√£ b·ªã √¥ nhi·ªÖm v√† ph·ª•c h·ªìi m√¥i tr∆∞·ªùng b·ªã √¥ nhi·ªÖm) v√† c√¥ng khai th√¥ng tin ƒë·ªëi v·ªõi h√†nh vi vi ph·∫°m nghi√™m tr·ªçng, g√¢y √¥ nhi·ªÖm m√¥i tr∆∞·ªùng ho·∫∑c t√°c ƒë·ªông x·∫•u ƒë·∫øn x√£ h·ªôi,‚Ä¶ Ngo√†i c√¥ng c·ª• x·ª≠ ph·∫°t vi ph·∫°m h√†nh ch√≠nh theo Ngh·ªã ƒë·ªãnh 155/2016/Nƒê-CP n√™u tr√™n, Qu·ªëc h·ªôi ƒë√£ th√¥ng qua B·ªô Lu·∫≠t h√¨nh s·ª± s·ªë 100/2015/QH13 v√† Lu·∫≠t s·ª≠a ƒë·ªïi, b·ªï sung m·ªôt s·ªë ƒëi·ªÅu c·ªßa B·ªô lu·∫≠t h√¨nh s·ª± nƒÉm 2015, trong ƒë√≥ ƒë√£ ƒë·ªãnh l∆∞·ª£ng c√°c h√†nh vi vi ph·∫°m g√¢y √¥ nhi·ªÖm m√¥i tr∆∞·ªùng ƒë·ªÉ x·ª≠ l√Ω tr√°ch nhi·ªám ƒë·ªëi v·ªõi c√° nh√¢n, t·ªï ch·ª©c vi ph·∫°m. ƒê√¢y l√† m·ªôt c√¥ng c·ª• h·ªØu hi·ªáu ƒë·ªÉ rƒÉn ƒëe c√° nh√¢n, t·ªï ch·ª©c c·ªë t√¨nh tr·ªën tr√°nh tr√°ch nhi·ªám ƒë·ªÉ th·ª±c hi·ªán c√°c h√†nh vi c·ªë √Ω g√¢y √¥ nhi·ªÖm m√¥i tr∆∞·ªùng."
        },
        {
            "icon": "üó∫Ô∏è", 
            "title": "Quy ho·∫°ch qu·ªπ ƒë·∫•t v√† s·∫Øp x·∫øp khu d√¢n c∆∞ cho ƒë·ªìng b√†o d√¢n t·ªôc", 
            "text": "Quick Question 3",
            "question": "ƒê·ªÅ ngh·ªã Nh√† n∆∞·ªõc quy ho·∫°ch qu·ªπ ƒë·∫•t, s·∫Øp x·∫øp l·∫°i c√°c khu d√¢n c∆∞ ƒë·ªìng b√†o M√¥ng, Dao, Kh∆° M√∫ hi·ªán nay ƒëang s·ªëng ·ªü khu v·ª±c ƒë·ªìi, n√∫i cao, nh·ªè l·∫ª chuy·ªÉn xu·ªëng khu v·ª±c th·∫•p h∆°n sinh s·ªëng t·∫≠p trung khoa h·ªçc, h·ª£p l√Ω ƒë·ªÉ khai hoang ru·ªông b·∫≠c thang cho ƒë·ªìng b√†o canh t√°c tr·ªìng l√∫a n∆∞·ªõc, tr·ªìng m√†u c·∫°n, tr·ªìng r·ª´ng‚Ä¶ƒë·ªÉ ·ªïn ƒë·ªãnh ƒë·ªùi s·ªëng v√† c√≥ ƒëi·ªÅu ki·ªán ph√°t tri·ªÉn.",
            "answer": "ƒê·ªÉ ƒë√°p ·ª©ng qu·ªπ ƒë·∫•t cho nhu c·∫ßu v·ªÅ nh√† ·ªü, ƒë·∫•t s·∫£n xu·∫•t n√¥ng nghi·ªáp, B·ªô T√†i nguy√™n v√† M√¥i tr∆∞·ªùng ƒë√£ tr√¨nh Ch√≠nh ph·ªß ƒë·ªÉ tr√¨nh Qu·ªëc h·ªôi ban h√†nh Ngh·ªã quy·∫øt s·ªë 134/2016/QH13 ph√™ duy·ªát ƒëi·ªÅu ch·ªânh quy ho·∫°ch s·ª≠ d·ª•ng ƒë·∫•t ƒë·∫øn nƒÉm 2020 v√† k·∫ø ho·∫°ch s·ª≠ d·ª•ng ƒë·∫•t k·ª≥ cu·ªëi (2016-2020) c·∫•p qu·ªëc gia trong ƒë√≥ c√≥ b·ªë tr√≠ qu·ªπ ·ªü, ƒë·∫•t s·∫£n xu·∫•t n√¥ng nghi·ªáp cho c√°c nhu c·∫ßu ph√°t tri·ªÉn kinh t·∫ø - x√£ h·ªôi c≈©ng nh∆∞ gi·∫£i quy·∫øt qu·ªπ ƒë·∫•t cho ƒë·ªìng b√†o d√¢n t·ªôc thi·ªÉu s·ªë. ƒê·ªìng th·ªùi, B·ªô c≈©ng ƒë√£ th·∫©m ƒë·ªãnh tr√¨nh Ch√≠nh ph·ªß xem x√©t ph√™ duy·ªát ƒëi·ªÅu ch·ªânh quy ho·∫°ch s·ª≠ d·ª•ng ƒë·∫•t ƒë·∫øn nƒÉm 2020 v√† k·∫ø ho·∫°ch s·ª≠ d·ª•ng ƒë·∫•t k·ª≥ cu·ªëi (2016-2020) t·ªânh Thanh H√≥a (T·ªù tr√¨nh s·ªë 93/TTR-BTNMT ng√†y 16/11/2017). Tr√™n c∆° s·ªü, ƒëi·ªÅu ch·ªânh quy ho·∫°ch s·ª≠ d·ª•ng ƒë·∫•t ƒë·∫øn nƒÉm 2020 v√† k·∫ø ho·∫°ch s·ª≠ d·ª•ng ƒë·∫•t k·ª≥ cu·ªëi (2016-2020) c·ªßa t·ªânh ƒë∆∞·ª£c ph√™ duy·ªát, ·ª¶y ban nh√¢n d√¢n t·ªânh Thanh H√≥a ch·ªâ ƒë·∫°o ·ª¶y ban nh√¢n d√¢n c√°c huy·ªán tri·ªÉn khai l·∫≠p ƒëi·ªÅu ch·ªânh quy ho·∫°ch, k·∫ø ho·∫°ch s·ª≠ d·ª•ng ƒë·∫•t c·∫•p huy·ªán l√†m cƒÉn c·ª© ƒë·ªÉ th·ª±c hi·ªán ch√≠nh s√°ch giao ƒë·∫•t cho ƒë·ªìng b√†o M√¥ng, Dao, Kh∆° M√∫ tr√™n ƒë·ªãa b√†n."
        },
        {
            "icon": "üìú", 
            "title": "Giao ƒë·∫•t c√°c n√¥ng tr∆∞·ªùng cho ng∆∞·ªùi d√¢n qu·∫£n l√Ω, s·ª≠ d·ª•ng", 
            "text": "Quick Question 4",
            "question": "C√°c x√£: Th√†nh V√¢n, V√¢n Du, Th√†nh T√¢m huy·ªán Th·∫°ch Th√†nh, t·ªânh Thanh H√≥a ƒë·ªÅ ngh·ªã c√°c ng√†nh c√≥ li√™n quan gi·∫£i quy·∫øt giao ƒë·∫•t c·ªßa c√°c N√¥ng tr∆∞·ªùng Th√†nh V√¢n, V√¢n Du, Th√†nh T√¢m cho ng∆∞·ªùi d√¢n qu·∫£n l√Ω, s·ª≠ d·ª•ng",
            "answer": "Theo quy ƒë·ªãnh t·∫°i ƒêi·ªÅu 59 v√† ƒêi·ªÅu 66 Lu·∫≠t ƒë·∫•t ƒëai hi·ªán h√†nh th√¨ v·∫•n ƒë·ªÅ c·ªßa tri ki·∫øn ngh·ªã thu·ªôc th·∫©m quy·ªÅn c·ªßa ·ª¶y ban nh√¢n d√¢n c·∫•p t·ªânh, c·∫•p huy·ªán. ƒê·ªëi v·ªõi ch·ªâ ƒë·∫°o c·ªßa Trung ∆∞∆°ng, B·ªô T√†i nguy√™n v√† M√¥i tr∆∞·ªùng b√°o c√°o th√™m nh∆∞ sau: Th·ª±c hi·ªán Ngh·ªã quy·∫øt s·ªë 28-NQ/TW, Ngh·ªã ƒë·ªãnh s·ªë 170/2004/Nƒê-CP, Ngh·ªã ƒë·ªãnh s·ªë 200/2004/Nƒê-CP v√† Ngh·ªã ƒë·ªãnh s·ªë 118/2014/Nƒê-CP, c√°c ƒë·ªãa ph∆∞∆°ng ph·∫£i r√† so√°t l·∫°i ƒë·∫•t ƒëai, b√†n giao v·ªÅ ƒë·ªãa ph∆∞∆°ng ph·∫ßn di·ªán t√≠ch ƒë·∫•t s·ª≠ d·ª•ng sai m·ª•c ƒë√≠ch, k√©m ho·∫∑c kh√¥ng hi·ªáu qu·∫£ (b√†n giao m·ªôt ph·∫ßn ƒë·∫•t ho·∫∑c to√†n b·ªô - gi·∫£i th·ªÉ). C√°c ƒë·ªãa ph∆∞∆°ng ph·∫£i x√¢y d·ª±ng ph∆∞∆°ng √°n s·ª≠ d·ª•ng ƒë·∫•t ƒë·ªëi v·ªõi di·ªán t√≠ch ƒë·∫•t n√†y ƒë·ªÉ ƒë·ªÉ giao l·∫°i cho t·ªï ch·ª©c, h·ªô gia ƒë√¨nh, c√° nh√¢n ho·∫∑c chuy·ªÉn th√†nh BQL r·ª´ng... ƒê·ªëi v·ªõi t·ªânh Thanh H√≥a, s·ªë li·ªáu ƒë·∫•t b√†n giao ho·∫∑c d·ª± ki·∫øn b√†n giao v·ªÅ ƒë·ªãa ph∆∞∆°ng t·ª´ nƒÉm 2004 ƒë·∫øn nay kho·∫£ng 14.675 ha (trong ƒë√≥ bao g·ªìm ph·∫ßn di·ªán t√≠ch ƒë·∫•t c√°c n√¥ng tr∆∞·ªùng tr√™n ƒë·ªãa b√†n huy·ªán Th·∫°ch Th√†nh b√†n giao v·ªÅ ƒë·ªãa ph∆∞∆°ng), nh∆∞ng ƒë·∫øn nay ƒë·ªãa ph∆∞∆°ng v·∫´n ch∆∞a x√¢y d·ª±ng v√† t·ªï ch·ª©c th·ª±c hi·ªán ph∆∞∆°ng √°n s·ª≠ d·ª•ng qu·ªπ ƒë·∫•t n√†y. Th·ª±c hi·ªán Ngh·ªã quy·∫øt s·ªë 112/2015/NQ-QH13 c·ªßa Qu·ªëc h·ªôi v√† B·ªô T√†i nguy√™n v√† M√¥i tr∆∞·ªùng ƒë√£ tr√¨nh Th·ªß t∆∞·ªõng Ch√≠nh ph·ªß ban h√†nh Ch·ªâ th·ªã s·ªë 11/CT-TTg trong ƒë√≥ y√™u c·∫ßu ·ª¶y ban nh√¢n d√¢n c√°c t·ªânh, th√†nh ph·ªë tr·ª±c thu·ªôc Trung ∆∞∆°ng ti·∫øp nh·∫≠n v√† c√≥ ph∆∞∆°ng √°n ƒë·ªëi v·ªõi qu·ªπ ƒë·∫•t b√†n giao l·∫°i cho c√°c ƒë·ªãa ph∆∞∆°ng, ƒë·ªìng th·ªùi ph·∫£i x√¢y d·ª±ng v√† th·ª±c hi·ªán ƒê·ªÅ √°n ‚ÄúTƒÉng c∆∞·ªùng qu·∫£n l√Ω ƒë·ªëi v·ªõi ƒë·∫•t ƒëai c√≥ ngu·ªìn g·ªëc t·ª´ c√°c n√¥ng, l√¢m tr∆∞·ªùng qu·ªëc doanh hi·ªán do c√°c c√¥ng ty n√¥ng nghi·ªáp, c√¥ng ty l√¢m nghi·ªáp kh√¥ng thu·ªôc di·ªán s·∫Øp x·∫øp l·∫°i theo Ngh·ªã ƒë·ªãnh s·ªë 118/2014/Nƒê-CP, ban qu·∫£n l√Ω r·ª´ng v√† c√°c t·ªï ch·ª©c s·ª± nghi·ªáp kh√°c, h·ªô gia ƒë√¨nh, c√° nh√¢n s·ª≠ d·ª•ng‚Äù (ƒê·ªÅ √°n), trong ƒë√≥ bao g·ªìm n·ªôi dung r√† so√°t, x√¢y d·ª±ng v√† th·ª±c hi·ªán ph∆∞∆°ng √°n s·ª≠ d·ª•ng qu·ªπ ƒë·∫•t c√°c n√¥ng, l√¢m tr∆∞·ªùng b√†n giao v·ªÅ ƒë·ªãa ph∆∞∆°ng. B·ªô T√†i nguy√™n v√† M√¥i tr∆∞·ªùng ƒë√£ tr√¨nh Th·ªß t∆∞·ªõng Ch√≠nh ph·ªß ph√™ duy·ªát ƒê·ªÅ √°n TƒÉng c∆∞·ªùng qu·∫£n l√Ω ƒë·ªëi v·ªõi ƒë·∫•t ƒëai c√≥ ngu·ªìn g·ªëc t·ª´ c√°c n√¥ng, l√¢m tr∆∞·ªùng qu·ªëc doanh hi·ªán do c√°c c√¥ng ty n√¥ng nghi·ªáp, c√¥ng ty l√¢m nghi·ªáp kh√¥ng thu·ªôc di·ªán s·∫Øp x·∫øp l·∫°i theo Ngh·ªã ƒë·ªãnh s·ªë 118/2014/Nƒê-CP, ban qu·∫£n l√Ω r·ª´ng v√† c√°c t·ªï ch·ª©c s·ª± nghi·ªáp kh√°c, h·ªô gia ƒë√¨nh, c√° nh√¢n s·ª≠ d·ª•ng (T·ªù tr√¨nh s·ªë 21/TTR-BTNMT ng√†y 10/5/2017) v√† ƒë√£ ƒë∆∞·ª£c Th·ªß t∆∞·ªõng Ch√≠nh ph·ªß ƒë·ªìng √Ω v·ªÅ n·ªôi dung."
        }
    ]

    def send_message(text: str) -> None:
        """Send a message and fetch AI response."""
        if not text.strip():
            return
        
        st.session_state.messages.append({"role": "user", "content": text})
        
        payload = {
            "fallback_response": "Hi·ªán m√¨nh ch∆∞a c√≥ ƒë·ªß th√¥ng tin ƒë·ªÉ tr·∫£ l·ªùi y√™u c·∫ßu c·ªßa b·∫°n. B·∫°n vui l√≤ng m√¥ t·∫£ th√™m m·ªôt ch√∫t nh√©!",
            "query": text,
            "collection_name": "cb92553d-c21e-4921-b036-de0bb290a773",
            "history": [], "slots": [], "activate_slots": False, "activate_history": False
        }
        
        with st.spinner("üîç AI is thinking..."):
            try:
                response = requests.post("http://1.53.58.232:5558/chatbot-answer/", json=payload, timeout=300)
                answer = response.json().get("message", "No response available") if response.status_code == 200 else f"‚ö†Ô∏è Service unavailable ({response.status_code})"
            except requests.RequestException:
                answer = "üîå Connection issue. Please try again."
        
        st.session_state.messages.append({"role": "assistant", "content": answer})
        st.session_state.selected_question = None
        st.rerun()

    # Header
    total_conversations = len(st.session_state.messages) // 2
    st.markdown(f"""
    <div class="header">
        <h1>ü§ñ AI Q&A Assistant</h1>
        <p>Get intelligent answers to your questions instantly</p>
        <div class="stats">
            <div class="stat"><strong>{total_conversations}</strong><br>Conversations</div>
            <div class="stat"><strong>{len(st.session_state.messages)}</strong><br>Messages</div>
            <div class="stat"><strong>üü¢</strong><br>Online</div>
        </div>
    </div>
    """, unsafe_allow_html=True)

    # Layout
    cols = [2, 1.5, 1] if st.session_state.selected_question is not None else [3, 1]
    col_chat, *other_cols = st.columns(cols)

    # Chat Section
    with col_chat:
        st.markdown('<div class="chat-box">', unsafe_allow_html=True)
        
        col1, col2 = st.columns([3, 1])
        with col1:
            st.markdown("### üí¨ Chat Interface")
        with col2:
            if st.button("üóëÔ∏è Clear", key="clear_chat"):
                st.session_state.messages = []
                st.rerun()

        if st.session_state.messages:
            for msg in st.session_state.messages:
                with st.chat_message(msg["role"]):
                    st.markdown(msg["content"])
        else:
            st.markdown('<div class="empty"><div style="font-size:3rem;margin-bottom:1rem">üí≠</div><h3>Welcome to AI Assistant!</h3><p>Ask me anything or try quick questions ‚Üí</p></div>', unsafe_allow_html=True)

        if prompt := st.chat_input("üí¨ Ask your question here..."):
            send_message(prompt)
        
        st.markdown('</div>', unsafe_allow_html=True)

    # Preview (if question selected)
    if st.session_state.selected_question is not None:
        with other_cols[0]:
            q = QUESTIONS[st.session_state.selected_question]
            
            st.markdown('<div class="preview">', unsafe_allow_html=True)
            st.markdown("### üìã Sample Q&A")
            
            st.markdown(f'<div style="background:white;padding:1rem;border-radius:10px;margin-bottom:1rem"><strong>{q["icon"]} {q["title"]}</strong><br><em>{q["question"]}</em></div>', unsafe_allow_html=True)
            st.markdown(f'<div class="preview-answer"><strong>üí° Sample Answer</strong><br>{q["answer"]}</div>', unsafe_allow_html=True)
            
            col1, col2 = st.columns(2)
            with col1:
                if st.button("üöÄ Ask", key=f"ask_{st.session_state.selected_question}"):
                    send_message(q["question"])
            with col2:
                if st.button("‚ùå Close", key=f"close_{st.session_state.selected_question}"):
                    st.session_state.selected_question = None
                    st.rerun()
            
            st.markdown('</div>', unsafe_allow_html=True)

    # Sidebar
    with other_cols[-1]:
        st.markdown('<div class="sidebar">', unsafe_allow_html=True)
        st.markdown("### ‚ö° Quick Start")
        
        for i, q in enumerate(QUESTIONS):
            button_label = f"{q['icon']} {q['title']}\n{q['text']}"
            if st.button(button_label, key=f"quick_{i}"):
                if st.session_state.selected_question == i:
                    pass
                else:
                    st.session_state.selected_question = i
                    st.rerun()
        
        st.markdown('</div>', unsafe_allow_html=True)