import streamlit as st
import requests
from requests.exceptions import RequestException, Timeout, ConnectionError

for key in ["pdf_url", "summary", "agency", "messages", "chat_input_value"]:
    if key not in st.session_state:
        st.session_state[key] = [] if key == "messages" else ""

st.title("Text Processing Interface")
function_choice = st.sidebar.selectbox(
    "Choose function:",
    ["PDF Text Summarizer", "Document Classification", "Q&A Chatbot"]
)

if function_choice == "PDF Text Summarizer":
    st.header("PDF Text Summarizer")
    col1, col2 = st.columns([3, 1])

    with col1:
        pdf_url = st.text_input("Enter PDF URL:", value=st.session_state.pdf_url)
        st.session_state.pdf_url = pdf_url
        if st.button("Summarize PDF", type="primary"):
            if pdf_url:
                try:
                    with st.spinner("Processing PDF... This may take a while."):
                        response = requests.post(
                            "http://1.53.58.232:8521/summarize_pdf", 
                            json={"pdf_url": pdf_url},
                            timeout=60  # Increased timeout for PDF processing
                        )
                        if response.status_code == 200:
                            result = response.json()
                            if "summary" in result:
                                st.success("Summary generated!")
                                st.markdown(result["summary"])
                            else:
                                st.json(result)
                        else:
                            st.error(f"Error: {response.status_code}")
                except Timeout:
                    st.error("‚è±Ô∏è Request timed out. The server is taking too long to respond. Please try again later.")
                except ConnectionError:
                    st.error("üîå Connection error. Please check if the server is running and accessible.")
                except RequestException as e:
                    st.error(f"‚ùå Request failed: {str(e)}")
            else:
                st.warning("Please enter a PDF URL")

    with col2:
        st.markdown("**Examples**")
        if st.button("example 1"):
            st.session_state.pdf_url = "https://vbpl.vn/FileData/TW/Lists/vbpq/Attachments/176983/VanBanGoc_645029.pdf"
            st.rerun()
        if st.button("example 2"):
            st.session_state.pdf_url = "https://vbpl.vn/FileData/TW/Lists/vbpq/Attachments/175320/VanBanGoc_2025.%20TT%20Dieutra%20dien%20NL%20tai%20tao.pdf"
            st.rerun()
        if st.button("example 3"):
            st.session_state.pdf_url = "https://vbpl.vn/FileData/TW/Lists/vbpq/Attachments/177810/VanBanGoc_03-bnnmt.pdf"
            st.rerun()

elif function_choice == "Document Classification":
    st.header("Document Classification")
    col1, col2 = st.columns([3, 1])

    with col1:
        summary = st.text_area("Document Summary:", height=120, value=st.session_state.summary)
        agency = st.text_input("Issuing Agency:", value=st.session_state.agency)
        st.session_state.summary = summary
        st.session_state.agency = agency
        if st.button("Classify Document", type="primary"):
            if not summary or not agency:
                st.warning("Please fill in both fields")
            elif len(summary) < 5 or len(agency) < 5:
                st.warning("Text too short. Please enter at least 5 characters in both fields")
            else:
                try:
                    with st.spinner("Classifying document..."):
                        response = requests.post(
                            "http://1.53.58.232:8888/classify", 
                            json={"summary": summary, "issuing_agency": agency},
                            timeout=30  # 30 second timeout
                        )
                        if response.status_code == 200:
                            result = response.json()
                            st.success("Classification complete!")
                            if isinstance(result, dict):
                                for key, value in result.items():
                                    st.subheader(key.replace('_', ' ').title())
                                    if isinstance(value, list):
                                        for item in value:
                                            st.write(f"‚Ä¢ {item}")
                                    elif isinstance(value, dict):
                                        for sub_key, sub_value in value.items():
                                            st.write(f"**{sub_key}:** {sub_value}")
                                    else:
                                        st.write(value)
                            else:
                                st.write(result)
                        else:
                            st.error(f"Error: {response.status_code}")
                except Timeout:
                    st.error("‚è±Ô∏è Request timed out. The classification service is taking too long to respond.")
                except ConnectionError:
                    st.error("üîå Connection error. Please check if the server is running.")
                except RequestException as e:
                    st.error(f"‚ùå Request failed: {str(e)}")

    with col2:
        st.markdown("**Examples**")
        if st.button("example 1"):
            st.session_state.summary = "Ngh·ªã ƒë·ªãnh quy ƒë·ªãnh chi ti·∫øt m·ªôt s·ªë ƒëi·ªÅu v√† bi·ªán ph√°p thi h√†nh Lu·∫≠t t√≠n ng∆∞·ª°ng, t√¥n gi√°o"
            st.session_state.agency = "VƒÉn ph√≤ng Ch√≠nh ph·ªß"
            st.rerun()
        if st.button("example 2"):
            st.session_state.summary = "Ph√™ duy·ªát Chi·∫øn l∆∞·ª£c ph√°t tri·ªÉn tr·ªìng tr·ªçt ƒë·∫øn nƒÉm 2030, t·∫ßm nh√¨n ƒë·∫øn nƒÉm 2050"
            st.session_state.agency = "Th·ªß t∆∞·ªõng Ch√≠nh ph·ªß"
            st.rerun()

elif function_choice == "Q&A Chatbot":
    col_header, col_clear = st.columns([3, 1])
    with col_header:
        st.header("Q&A Chatbot")
    with col_clear:
        if st.button("Clear Chat", type="secondary"):
            st.session_state.messages = []
            if "pending_question" in st.session_state:
                del st.session_state.pending_question
            if "selected_question" in st.session_state:
                del st.session_state.selected_question
            st.rerun()

    total_conversations = len(st.session_state.messages) // 2
    st.caption(f"Total conversations: {total_conversations}")
    col1, col2 = st.columns([3, 1])

    if "pending_question" not in st.session_state:
        st.session_state.pending_question = ""
    if "selected_question" not in st.session_state:
        st.session_state.selected_question = None

    def send_message(text):
        if not text.strip():
            return
        
        st.session_state.messages.append({"role": "user", "content": text})
        
        payload = {
            "fallback_response": "Hi·ªán m√¨nh ch∆∞a c√≥ ƒë·ªß th√¥ng tin ƒë·ªÉ tr·∫£ l·ªùi y√™u c·∫ßu c·ªßa b·∫°n. B·∫°n vui l√≤ng m√¥ t·∫£ th√™m m·ªôt ch√∫t nh√©!",
            "query": text,
            "collection_name": "cb92553d-c21e-4921-b036-de0bb290a773",
            "history": [],
            "slots": [],
            "activate_slots": False,
            "activate_history": False
        }
        
        try:
            with st.spinner("Getting response from chatbot..."):
                response = requests.post(
                    "http://1.53.58.232:5558/chatbot-answer/", 
                    json=payload, 
                    timeout=60  # Increased timeout to 60 seconds
                )
                if response.status_code == 200:
                    answer = response.json().get("message", "No response")
                else:
                    answer = f"Server error (Status: {response.status_code}). Please try again."
        except Timeout:
            answer = "‚è±Ô∏è The chatbot is taking too long to respond. This might be due to high server load. Please try again in a moment."
        except ConnectionError:
            answer = "üîå Unable to connect to the chatbot service. Please check your internet connection or try again later."
        except RequestException as e:
            answer = f"‚ùå Error communicating with chatbot: {str(e)}"
        except Exception as e:
            answer = f"‚ùå Unexpected error: {str(e)}"
        
        st.session_state.messages.append({"role": "assistant", "content": answer})
        st.session_state.pending_question = ""
        st.session_state.selected_question = None
        st.rerun()

    with col1:
        if st.session_state.selected_question:
            st.info("**Selected Question Preview:**")
            st.write(st.session_state.selected_question)
            col_confirm, col_cancel = st.columns([1, 1])
            with col_confirm:
                if st.button("‚úÖ Send Question"):
                    send_message(st.session_state.selected_question)
            with col_cancel:
                if st.button("‚ùå Cancel"):
                    st.session_state.selected_question = None
                    st.rerun()
            st.divider()

        for message in st.session_state.messages:
            with st.chat_message(message["role"]):
                st.markdown(message["content"])

        prompt = st.chat_input("Ask your question...")
        if prompt:
            send_message(prompt)

    with col2:
        st.markdown("**Quick Questions**")
        questions = [
            ("Question 1", "nh√¢n d√¢n l√™n g·∫∑p ƒë·ªãa ch√≠nh x√£ ƒë·ªÉ l√†m c√°c th·ªß t·ª•c chuy·ªÉn nh∆∞·ª£ng, chuy·ªÉn m·ª•c ƒë√≠ch, h·ª£p ƒë·ªìng t·∫∑ng cho quy·ªÅn s·ª≠ d·ª•ng ƒë·∫•t. v√† ƒë·ªãa ch√≠nh c·∫•p gi·∫•y t·ªù h·ª£p ƒë·ªìng cho nh√¢n d√¢n. V·∫≠y ƒë·ªãa ch√≠nh c√≥ ƒë∆∞·ª£c thu ti·ªÅn gi·∫•y h·ª£p ƒë·ªìng v√† c√°c thu t·ª•c gi·∫•y t·ªù kh√°c kh√¥ng? n·∫øu ƒë∆∞·ª£c thu ti·ªÅn th√¨ thu theo quy ƒë·ªãnh n√†o? v√† ti·ªÅn ƒë√≥ng d·∫•u UBND x√£ c√≥ c√≤n thu th√™m kh√¥ng?"),
            ("Question 2", "Vi·ªác c·∫•p ph√©p v√† gi√°m s√°t khai th√°c t√†i nguy√™n thi√™n nhi√™n (nh∆∞ kho√°ng s·∫£n, n∆∞·ªõc ng·∫ßm) ƒëang ƒë∆∞·ª£c c·∫£i thi·ªán theo h∆∞·ªõng n√†o ƒë·ªÉ h·∫°n ch·∫ø khai th√°c qu√° m·ª©c?"),
            ("Question 3", "C√¥ng t√°c qu·∫£n l√Ω, gi√°m s√°t ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠ v√† ngu·ªìn n∆∞·ªõc hi·ªán nay ƒë∆∞·ª£c th·ª±c hi·ªán ra sao, v√† c√≥ k·∫ø ho·∫°ch n√¢ng c·∫•p h·ªá th·ªëng quan tr·∫Øc kh√¥ng?"),
            ("Question 4", "K·∫ø ho·∫°ch x·ª≠ l√Ω √¥ nhi·ªÖm r√°c th·∫£i t·∫°i c√°c ‚Äúƒëi·ªÉm n√≥ng‚Äù nh∆∞ b√£i r√°c Nam S∆°n (H√† N·ªôi) ho·∫∑c ƒêa Ph∆∞·ªõc (TP.HCM) ƒëang tri·ªÉn khai th·∫ø n√†o?")
        ]
        for label, question in questions:
            if st.button(label, key=label):
                st.session_state.selected_question = question
                st.rerun()